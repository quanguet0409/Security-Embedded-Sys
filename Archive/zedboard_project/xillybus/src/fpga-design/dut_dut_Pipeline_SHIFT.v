// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_dut_Pipeline_SHIFT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln238,
        e_digits_data_V_address0,
        e_digits_data_V_ce0,
        e_digits_data_V_we0,
        e_digits_data_V_d0,
        e_digits_data_V_q0,
        e_digits_data_V_address1,
        e_digits_data_V_ce1,
        e_digits_data_V_we1,
        e_digits_data_V_d1,
        e_digits_data_V_q1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] zext_ln238;
output  [4:0] e_digits_data_V_address0;
output   e_digits_data_V_ce0;
output   e_digits_data_V_we0;
output  [63:0] e_digits_data_V_d0;
input  [63:0] e_digits_data_V_q0;
output  [4:0] e_digits_data_V_address1;
output   e_digits_data_V_ce1;
output   e_digits_data_V_we1;
output  [63:0] e_digits_data_V_d1;
input  [63:0] e_digits_data_V_q1;

reg ap_idle;
reg[4:0] e_digits_data_V_address0;
reg e_digits_data_V_ce0;
reg e_digits_data_V_we0;
reg[4:0] e_digits_data_V_address1;
reg e_digits_data_V_ce1;
reg e_digits_data_V_we1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [0:0] icmp_ln240_1_reg_290;
reg   [0:0] icmp_ln240_reg_281;
reg   [0:0] tmp_reg_277;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] tmp_fu_125_p3;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln240_fu_140_p2;
reg   [4:0] e_digits_data_V_addr_reg_285;
wire   [0:0] icmp_ln240_1_fu_157_p2;
reg   [4:0] e_digits_data_V_addr_1_reg_294;
reg   [63:0] e_digits_data_V_load_reg_299;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [0:0] tmp_5_reg_304;
reg   [62:0] tmp_2_reg_309;
reg   [62:0] tmp_3_reg_314;
wire   [63:0] zext_ln1691_fu_152_p1;
wire   [63:0] zext_ln67_fu_169_p1;
reg   [64:0] k_V_fu_60;
wire   [64:0] phitmp_cast_fu_225_p3;
wire    ap_loop_init;
reg   [5:0] x_fu_64;
wire   [5:0] x_3_fu_174_p2;
reg   [5:0] ap_sig_allocacmp_x_2;
reg   [6:0] j_fu_68;
wire   [6:0] zext_ln238_cast_fu_103_p1;
wire   [6:0] add_ln241_1_fu_163_p2;
reg   [6:0] ap_sig_allocacmp_j_load;
wire   [4:0] empty_32_fu_136_p1;
wire   [4:0] add_ln241_fu_146_p2;
wire   [0:0] empty_31_fu_221_p1;
wire   [0:0] trunc_ln1543_fu_245_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_start_int;
reg    ap_condition_73;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_done_reg = 1'b0;
end

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_73)) begin
            j_fu_68 <= add_ln241_1_fu_163_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_68 <= zext_ln238_cast_fu_103_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
                k_V_fu_60[64] <= 1'b0;
    end else if (((tmp_reg_277 == 1'd0) & (icmp_ln240_reg_281 == 1'd0) & (icmp_ln240_1_reg_290 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                k_V_fu_60[64] <= phitmp_cast_fu_225_p3[64];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_73)) begin
            x_fu_64 <= x_3_fu_174_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_64 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln240_1_fu_157_p2 == 1'd0) & (icmp_ln240_fu_140_p2 == 1'd0) & (tmp_fu_125_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        e_digits_data_V_addr_1_reg_294 <= zext_ln67_fu_169_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln240_fu_140_p2 == 1'd0) & (tmp_fu_125_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        e_digits_data_V_addr_reg_285 <= zext_ln1691_fu_152_p1;
        icmp_ln240_1_reg_290 <= icmp_ln240_1_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_277 == 1'd0) & (icmp_ln240_reg_281 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        e_digits_data_V_load_reg_299 <= e_digits_data_V_q1;
        tmp_2_reg_309 <= {{e_digits_data_V_q1[63:1]}};
        tmp_5_reg_304 <= k_V_fu_60[32'd64];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_125_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln240_reg_281 <= icmp_ln240_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_277 == 1'd0) & (icmp_ln240_reg_281 == 1'd0) & (icmp_ln240_1_reg_290 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_3_reg_314 <= {{e_digits_data_V_q0[63:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_277 <= ap_sig_allocacmp_x_2[32'd5];
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((tmp_reg_277 == 1'd1) | ((icmp_ln240_reg_281 == 1'd1) | (icmp_ln240_1_reg_290 == 1'd1))))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = zext_ln238_cast_fu_103_p1;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_68;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_x_2 = 6'd0;
    end else begin
        ap_sig_allocacmp_x_2 = x_fu_64;
    end
end

always @ (*) begin
    if (((tmp_reg_277 == 1'd0) & (icmp_ln240_reg_281 == 1'd0) & (icmp_ln240_1_reg_290 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        e_digits_data_V_address0 = e_digits_data_V_addr_1_reg_294;
    end else if (((icmp_ln240_1_fu_157_p2 == 1'd0) & (icmp_ln240_fu_140_p2 == 1'd0) & (tmp_fu_125_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        e_digits_data_V_address0 = zext_ln67_fu_169_p1;
    end else begin
        e_digits_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_reg_277 == 1'd0) & (icmp_ln240_reg_281 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        e_digits_data_V_address1 = e_digits_data_V_addr_reg_285;
    end else if (((icmp_ln240_fu_140_p2 == 1'd0) & (tmp_fu_125_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        e_digits_data_V_address1 = zext_ln1691_fu_152_p1;
    end else begin
        e_digits_data_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_reg_277 == 1'd0) & (icmp_ln240_reg_281 == 1'd0) & (icmp_ln240_1_reg_290 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln240_1_fu_157_p2 == 1'd0) & (icmp_ln240_fu_140_p2 == 1'd0) & (tmp_fu_125_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        e_digits_data_V_ce0 = 1'b1;
    end else begin
        e_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_277 == 1'd0) & (icmp_ln240_reg_281 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln240_fu_140_p2 == 1'd0) & (tmp_fu_125_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        e_digits_data_V_ce1 = 1'b1;
    end else begin
        e_digits_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_277 == 1'd0) & (icmp_ln240_reg_281 == 1'd0) & (icmp_ln240_1_reg_290 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        e_digits_data_V_we0 = 1'b1;
    end else begin
        e_digits_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_277 == 1'd0) & (icmp_ln240_reg_281 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        e_digits_data_V_we1 = 1'b1;
    end else begin
        e_digits_data_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln241_1_fu_163_p2 = ($signed(ap_sig_allocacmp_j_load) + $signed(7'd126));

assign add_ln241_fu_146_p2 = ($signed(empty_32_fu_136_p1) + $signed(5'd31));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_73 = ((icmp_ln240_1_fu_157_p2 == 1'd0) & (icmp_ln240_fu_140_p2 == 1'd0) & (tmp_fu_125_p3 == 1'd0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign e_digits_data_V_d0 = {{trunc_ln1543_fu_245_p1}, {tmp_3_reg_314}};

assign e_digits_data_V_d1 = {{tmp_5_reg_304}, {tmp_2_reg_309}};

assign empty_31_fu_221_p1 = e_digits_data_V_q0[0:0];

assign empty_32_fu_136_p1 = ap_sig_allocacmp_j_load[4:0];

assign icmp_ln240_1_fu_157_p2 = ((ap_sig_allocacmp_j_load == 7'd1) ? 1'b1 : 1'b0);

assign icmp_ln240_fu_140_p2 = ((ap_sig_allocacmp_j_load == 7'd0) ? 1'b1 : 1'b0);

assign phitmp_cast_fu_225_p3 = {{empty_31_fu_221_p1}, {64'd0}};

assign tmp_fu_125_p3 = ap_sig_allocacmp_x_2[32'd5];

assign trunc_ln1543_fu_245_p1 = e_digits_data_V_load_reg_299[0:0];

assign x_3_fu_174_p2 = (ap_sig_allocacmp_x_2 + 6'd2);

assign zext_ln1691_fu_152_p1 = add_ln241_fu_146_p2;

assign zext_ln238_cast_fu_103_p1 = zext_ln238;

assign zext_ln67_fu_169_p1 = add_ln241_1_fu_163_p2;

always @ (posedge ap_clk) begin
    k_V_fu_60[63:0] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dut_dut_Pipeline_SHIFT
