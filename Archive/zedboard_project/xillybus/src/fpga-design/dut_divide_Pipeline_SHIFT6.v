// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_divide_Pipeline_SHIFT6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln238,
        r_address0,
        r_ce0,
        r_we0,
        r_d0,
        r_q0,
        r_address1,
        r_ce1,
        r_we1,
        r_d1,
        r_q1,
        sh_prom_i_i_cast_cast,
        sh_prom2_i_i_cast_cast,
        cmp_i9_i
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] zext_ln238;
output  [4:0] r_address0;
output   r_ce0;
output   r_we0;
output  [63:0] r_d0;
input  [63:0] r_q0;
output  [4:0] r_address1;
output   r_ce1;
output   r_we1;
output  [63:0] r_d1;
input  [63:0] r_q1;
input  [7:0] sh_prom_i_i_cast_cast;
input  [7:0] sh_prom2_i_i_cast_cast;
input  [0:0] cmp_i9_i;

reg ap_idle;
reg[4:0] r_address0;
reg r_ce0;
reg r_we0;
reg[4:0] r_address1;
reg r_ce1;
reg r_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
reg   [0:0] icmp_ln240_2_reg_370;
reg   [0:0] icmp_ln240_reg_361;
reg   [0:0] tmp_6_reg_357;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [127:0] sh_prom2_i_i_cast_cast_cast_cast_fu_131_p1;
reg   [127:0] sh_prom2_i_i_cast_cast_cast_cast_reg_345;
wire   [127:0] sh_prom_i_i_cast_cast_cast_cast_fu_139_p1;
reg   [127:0] sh_prom_i_i_cast_cast_cast_cast_reg_351;
wire   [0:0] tmp_6_fu_165_p3;
wire   [0:0] icmp_ln240_fu_180_p2;
reg   [4:0] r_addr_reg_365;
wire   [0:0] icmp_ln240_2_fu_197_p2;
reg   [4:0] r_addr_1_reg_374;
reg   [63:0] r_load_reg_379;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [63:0] k_V_9_reg_385;
wire   [63:0] select_ln1691_fu_268_p3;
reg   [63:0] select_ln1691_reg_391;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [63:0] select_ln1691_1_fu_299_p3;
reg   [63:0] select_ln1691_1_reg_396;
wire   [63:0] zext_ln1691_fu_192_p1;
wire   [63:0] zext_ln0_fu_209_p1;
reg   [127:0] k_V_fu_66;
wire   [127:0] phitmp1_fu_306_p3;
wire    ap_loop_init;
reg   [5:0] x_fu_70;
wire   [5:0] x_5_fu_214_p2;
reg   [5:0] ap_sig_allocacmp_x_4;
reg   [6:0] j_fu_74;
wire   [6:0] zext_ln238_cast_fu_143_p1;
wire   [6:0] add_ln241_2_fu_203_p2;
reg   [6:0] ap_sig_allocacmp_j_load;
wire  signed [31:0] sh_prom2_i_i_cast_cast_cast_fu_127_p1;
wire  signed [31:0] sh_prom_i_i_cast_cast_cast_fu_135_p1;
wire   [4:0] empty_40_fu_176_p1;
wire   [4:0] add_ln241_fu_186_p2;
wire   [63:0] tmp_fu_233_p4;
wire   [127:0] or_ln_fu_243_p3;
wire   [127:0] lshr_ln1691_fu_250_p2;
wire   [127:0] shl_ln1691_fu_255_p2;
wire   [63:0] trunc_ln1691_fu_260_p1;
wire   [63:0] trunc_ln1691_1_fu_264_p1;
wire   [127:0] or_ln1543_2_fu_275_p3;
wire   [127:0] lshr_ln1691_1_fu_281_p2;
wire   [127:0] shl_ln1691_1_fu_286_p2;
wire   [63:0] trunc_ln1691_2_fu_291_p1;
wire   [63:0] trunc_ln1691_3_fu_295_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_start_int;
reg    ap_condition_83;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_done_reg = 1'b0;
end

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_83)) begin
            j_fu_74 <= add_ln241_2_fu_203_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_74 <= zext_ln238_cast_fu_143_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
                k_V_fu_66[64] <= 1'b0;
        k_V_fu_66[65] <= 1'b0;
        k_V_fu_66[66] <= 1'b0;
        k_V_fu_66[67] <= 1'b0;
        k_V_fu_66[68] <= 1'b0;
        k_V_fu_66[69] <= 1'b0;
        k_V_fu_66[70] <= 1'b0;
        k_V_fu_66[71] <= 1'b0;
        k_V_fu_66[72] <= 1'b0;
        k_V_fu_66[73] <= 1'b0;
        k_V_fu_66[74] <= 1'b0;
        k_V_fu_66[75] <= 1'b0;
        k_V_fu_66[76] <= 1'b0;
        k_V_fu_66[77] <= 1'b0;
        k_V_fu_66[78] <= 1'b0;
        k_V_fu_66[79] <= 1'b0;
        k_V_fu_66[80] <= 1'b0;
        k_V_fu_66[81] <= 1'b0;
        k_V_fu_66[82] <= 1'b0;
        k_V_fu_66[83] <= 1'b0;
        k_V_fu_66[84] <= 1'b0;
        k_V_fu_66[85] <= 1'b0;
        k_V_fu_66[86] <= 1'b0;
        k_V_fu_66[87] <= 1'b0;
        k_V_fu_66[88] <= 1'b0;
        k_V_fu_66[89] <= 1'b0;
        k_V_fu_66[90] <= 1'b0;
        k_V_fu_66[91] <= 1'b0;
        k_V_fu_66[92] <= 1'b0;
        k_V_fu_66[93] <= 1'b0;
        k_V_fu_66[94] <= 1'b0;
        k_V_fu_66[95] <= 1'b0;
        k_V_fu_66[96] <= 1'b0;
        k_V_fu_66[97] <= 1'b0;
        k_V_fu_66[98] <= 1'b0;
        k_V_fu_66[99] <= 1'b0;
        k_V_fu_66[100] <= 1'b0;
        k_V_fu_66[101] <= 1'b0;
        k_V_fu_66[102] <= 1'b0;
        k_V_fu_66[103] <= 1'b0;
        k_V_fu_66[104] <= 1'b0;
        k_V_fu_66[105] <= 1'b0;
        k_V_fu_66[106] <= 1'b0;
        k_V_fu_66[107] <= 1'b0;
        k_V_fu_66[108] <= 1'b0;
        k_V_fu_66[109] <= 1'b0;
        k_V_fu_66[110] <= 1'b0;
        k_V_fu_66[111] <= 1'b0;
        k_V_fu_66[112] <= 1'b0;
        k_V_fu_66[113] <= 1'b0;
        k_V_fu_66[114] <= 1'b0;
        k_V_fu_66[115] <= 1'b0;
        k_V_fu_66[116] <= 1'b0;
        k_V_fu_66[117] <= 1'b0;
        k_V_fu_66[118] <= 1'b0;
        k_V_fu_66[119] <= 1'b0;
        k_V_fu_66[120] <= 1'b0;
        k_V_fu_66[121] <= 1'b0;
        k_V_fu_66[122] <= 1'b0;
        k_V_fu_66[123] <= 1'b0;
        k_V_fu_66[124] <= 1'b0;
        k_V_fu_66[125] <= 1'b0;
        k_V_fu_66[126] <= 1'b0;
        k_V_fu_66[127] <= 1'b0;
    end else if (((tmp_6_reg_357 == 1'd0) & (icmp_ln240_reg_361 == 1'd0) & (icmp_ln240_2_reg_370 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                k_V_fu_66[127 : 64] <= phitmp1_fu_306_p3[127 : 64];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_83)) begin
            x_fu_70 <= x_5_fu_214_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_70 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln240_fu_180_p2 == 1'd0) & (tmp_6_fu_165_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln240_2_reg_370 <= icmp_ln240_2_fu_197_p2;
        r_addr_reg_365 <= zext_ln1691_fu_192_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_165_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln240_reg_361 <= icmp_ln240_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_reg_357 == 1'd0) & (icmp_ln240_reg_361 == 1'd0) & (icmp_ln240_2_reg_370 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_V_9_reg_385 <= r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln240_2_fu_197_p2 == 1'd0) & (icmp_ln240_fu_180_p2 == 1'd0) & (tmp_6_fu_165_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_addr_1_reg_374 <= zext_ln0_fu_209_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_reg_357 == 1'd0) & (icmp_ln240_reg_361 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_load_reg_379 <= r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_reg_357 == 1'd0) & (icmp_ln240_reg_361 == 1'd0) & (icmp_ln240_2_reg_370 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        select_ln1691_1_reg_396 <= select_ln1691_1_fu_299_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_reg_357 == 1'd0) & (icmp_ln240_reg_361 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        select_ln1691_reg_391 <= select_ln1691_fu_268_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sh_prom2_i_i_cast_cast_cast_cast_reg_345[31 : 0] <= sh_prom2_i_i_cast_cast_cast_cast_fu_131_p1[31 : 0];
        sh_prom_i_i_cast_cast_cast_cast_reg_351[31 : 0] <= sh_prom_i_i_cast_cast_cast_cast_fu_139_p1[31 : 0];
        tmp_6_reg_357 <= ap_sig_allocacmp_x_4[32'd5];
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((tmp_6_reg_357 == 1'd1) | ((icmp_ln240_reg_361 == 1'd1) | (icmp_ln240_2_reg_370 == 1'd1))))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = zext_ln238_cast_fu_143_p1;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_74;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_x_4 = 6'd0;
    end else begin
        ap_sig_allocacmp_x_4 = x_fu_70;
    end
end

always @ (*) begin
    if (((tmp_6_reg_357 == 1'd0) & (icmp_ln240_reg_361 == 1'd0) & (icmp_ln240_2_reg_370 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        r_address0 = r_addr_1_reg_374;
    end else if (((icmp_ln240_2_fu_197_p2 == 1'd0) & (icmp_ln240_fu_180_p2 == 1'd0) & (tmp_6_fu_165_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        r_address0 = zext_ln0_fu_209_p1;
    end else begin
        r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_6_reg_357 == 1'd0) & (icmp_ln240_reg_361 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        r_address1 = r_addr_reg_365;
    end else if (((icmp_ln240_fu_180_p2 == 1'd0) & (tmp_6_fu_165_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        r_address1 = zext_ln1691_fu_192_p1;
    end else begin
        r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_6_reg_357 == 1'd0) & (icmp_ln240_reg_361 == 1'd0) & (icmp_ln240_2_reg_370 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln240_2_fu_197_p2 == 1'd0) & (icmp_ln240_fu_180_p2 == 1'd0) & (tmp_6_fu_165_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        r_ce0 = 1'b1;
    end else begin
        r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_6_reg_357 == 1'd0) & (icmp_ln240_reg_361 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln240_fu_180_p2 == 1'd0) & (tmp_6_fu_165_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        r_ce1 = 1'b1;
    end else begin
        r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_reg_357 == 1'd0) & (icmp_ln240_reg_361 == 1'd0) & (icmp_ln240_2_reg_370 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        r_we0 = 1'b1;
    end else begin
        r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_reg_357 == 1'd0) & (icmp_ln240_reg_361 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        r_we1 = 1'b1;
    end else begin
        r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln241_2_fu_203_p2 = ($signed(ap_sig_allocacmp_j_load) + $signed(7'd126));

assign add_ln241_fu_186_p2 = ($signed(empty_40_fu_176_p1) + $signed(5'd31));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_83 = ((icmp_ln240_2_fu_197_p2 == 1'd0) & (icmp_ln240_fu_180_p2 == 1'd0) & (tmp_6_fu_165_p3 == 1'd0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign empty_40_fu_176_p1 = ap_sig_allocacmp_j_load[4:0];

assign icmp_ln240_2_fu_197_p2 = ((ap_sig_allocacmp_j_load == 7'd1) ? 1'b1 : 1'b0);

assign icmp_ln240_fu_180_p2 = ((ap_sig_allocacmp_j_load == 7'd0) ? 1'b1 : 1'b0);

assign lshr_ln1691_1_fu_281_p2 = or_ln1543_2_fu_275_p3 >> sh_prom_i_i_cast_cast_cast_cast_reg_351;

assign lshr_ln1691_fu_250_p2 = or_ln_fu_243_p3 >> sh_prom_i_i_cast_cast_cast_cast_reg_351;

assign or_ln1543_2_fu_275_p3 = {{r_load_reg_379}, {k_V_9_reg_385}};

assign or_ln_fu_243_p3 = {{tmp_fu_233_p4}, {r_load_reg_379}};

assign phitmp1_fu_306_p3 = {{k_V_9_reg_385}, {64'd0}};

assign r_d0 = select_ln1691_1_reg_396;

assign r_d1 = select_ln1691_reg_391;

assign select_ln1691_1_fu_299_p3 = ((cmp_i9_i[0:0] == 1'b1) ? trunc_ln1691_2_fu_291_p1 : trunc_ln1691_3_fu_295_p1);

assign select_ln1691_fu_268_p3 = ((cmp_i9_i[0:0] == 1'b1) ? trunc_ln1691_fu_260_p1 : trunc_ln1691_1_fu_264_p1);

assign sh_prom2_i_i_cast_cast_cast_cast_fu_131_p1 = $unsigned(sh_prom2_i_i_cast_cast_cast_fu_127_p1);

assign sh_prom2_i_i_cast_cast_cast_fu_127_p1 = $signed(sh_prom2_i_i_cast_cast);

assign sh_prom_i_i_cast_cast_cast_cast_fu_139_p1 = $unsigned(sh_prom_i_i_cast_cast_cast_fu_135_p1);

assign sh_prom_i_i_cast_cast_cast_fu_135_p1 = $signed(sh_prom_i_i_cast_cast);

assign shl_ln1691_1_fu_286_p2 = or_ln1543_2_fu_275_p3 << sh_prom2_i_i_cast_cast_cast_cast_reg_345;

assign shl_ln1691_fu_255_p2 = or_ln_fu_243_p3 << sh_prom2_i_i_cast_cast_cast_cast_reg_345;

assign tmp_6_fu_165_p3 = ap_sig_allocacmp_x_4[32'd5];

assign tmp_fu_233_p4 = {{k_V_fu_66[127:64]}};

assign trunc_ln1691_1_fu_264_p1 = shl_ln1691_fu_255_p2[63:0];

assign trunc_ln1691_2_fu_291_p1 = lshr_ln1691_1_fu_281_p2[63:0];

assign trunc_ln1691_3_fu_295_p1 = shl_ln1691_1_fu_286_p2[63:0];

assign trunc_ln1691_fu_260_p1 = lshr_ln1691_fu_250_p2[63:0];

assign x_5_fu_214_p2 = (ap_sig_allocacmp_x_4 + 6'd2);

assign zext_ln0_fu_209_p1 = add_ln241_2_fu_203_p2;

assign zext_ln1691_fu_192_p1 = add_ln241_fu_186_p2;

assign zext_ln238_cast_fu_143_p1 = zext_ln238;

always @ (posedge ap_clk) begin
    sh_prom2_i_i_cast_cast_cast_cast_reg_345[127:32] <= 96'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    sh_prom_i_i_cast_cast_cast_cast_reg_351[127:32] <= 96'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    k_V_fu_66[63:0] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dut_divide_Pipeline_SHIFT6
