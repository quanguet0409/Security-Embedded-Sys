// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_divide_Pipeline_NORMALIZE (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vn_V,
        d_out,
        d_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] vn_V;
output  [6:0] d_out;
output   d_out_ap_vld;
output  [1:0] ap_return;

reg ap_idle;
reg[6:0] d_out;
reg d_out_ap_vld;
reg[1:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1064_1_fu_147_p2;
wire   [0:0] icmp_ln1064_fu_128_p2;
wire   [0:0] tmp_fu_117_p3;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [1:0] ap_phi_mux_UnifiedRetVal_phi_fu_88_p6;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [63:0] vn_V_1_fu_60;
wire   [63:0] zext_ln1043_fu_166_p1;
wire    ap_loop_init;
reg   [6:0] magic_fu_64;
wire   [6:0] magic_3_fu_176_p2;
reg   [6:0] d_fu_68;
wire   [6:0] d_1_fu_170_p2;
wire   [6:0] d_load_2_load_fu_201_p1;
wire   [6:0] d_load_1_load_fu_205_p1;
wire    ap_block_pp0_stage0_01001;
wire   [62:0] tmp_11_fu_137_p4;
wire   [61:0] vn_V_2_fu_156_p4;
reg   [1:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_78;
reg    ap_condition_71;
reg    ap_condition_213;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 2'd0;
#0 ap_done_reg = 1'b0;
end

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 2'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_fu_117_p3 == 1'd1) | ((icmp_ln1064_fu_128_p2 == 1'd1) | (icmp_ln1064_1_fu_147_p2 == 1'd1))))) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_88_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            d_fu_68 <= 7'd64;
        end else if ((1'b1 == ap_condition_213)) begin
            d_fu_68 <= d_1_fu_170_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            magic_fu_64 <= 7'd0;
        end else if ((1'b1 == ap_condition_213)) begin
            magic_fu_64 <= magic_3_fu_176_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            vn_V_1_fu_60 <= vn_V;
        end else if ((1'b1 == ap_condition_213)) begin
            vn_V_1_fu_60 <= zext_ln1043_fu_166_p1;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_fu_117_p3 == 1'd1) | ((icmp_ln1064_fu_128_p2 == 1'd1) | (icmp_ln1064_1_fu_147_p2 == 1'd1))))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_71)) begin
        if (((tmp_fu_117_p3 == 1'd0) & (icmp_ln1064_fu_128_p2 == 1'd1))) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_88_p6 = 2'd2;
        end else if ((1'b1 == ap_condition_78)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_88_p6 = 2'd1;
        end else if ((tmp_fu_117_p3 == 1'd1)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_88_p6 = 2'd0;
        end else begin
            ap_phi_mux_UnifiedRetVal_phi_fu_88_p6 = 'bx;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_88_p6 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_fu_117_p3 == 1'd1) | ((icmp_ln1064_fu_128_p2 == 1'd1) | (icmp_ln1064_1_fu_147_p2 == 1'd1))))) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_88_p6;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((tmp_fu_117_p3 == 1'd1)) begin
            d_out = d_load_1_load_fu_205_p1;
        end else if (((tmp_fu_117_p3 == 1'd0) & (icmp_ln1064_fu_128_p2 == 1'd1))) begin
            d_out = d_load_2_load_fu_201_p1;
        end else if ((1'b1 == ap_condition_78)) begin
            d_out = d_fu_68;
        end else begin
            d_out = 'bx;
        end
    end else begin
        d_out = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_fu_117_p3 == 1'd0) & (icmp_ln1064_fu_128_p2 == 1'd0) & (icmp_ln1064_1_fu_147_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_fu_117_p3 == 1'd0) & (icmp_ln1064_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_fu_117_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        d_out_ap_vld = 1'b1;
    end else begin
        d_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_213 = ((tmp_fu_117_p3 == 1'd0) & (icmp_ln1064_fu_128_p2 == 1'd0) & (icmp_ln1064_1_fu_147_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_71 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_78 = ((tmp_fu_117_p3 == 1'd0) & (icmp_ln1064_fu_128_p2 == 1'd0) & (icmp_ln1064_1_fu_147_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign d_1_fu_170_p2 = ($signed(d_fu_68) + $signed(7'd126));

assign d_load_1_load_fu_205_p1 = d_fu_68;

assign d_load_2_load_fu_201_p1 = d_fu_68;

assign icmp_ln1064_1_fu_147_p2 = ((tmp_11_fu_137_p4 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln1064_fu_128_p2 = ((vn_V_1_fu_60 == 64'd0) ? 1'b1 : 1'b0);

assign magic_3_fu_176_p2 = (magic_fu_64 + 7'd2);

assign tmp_11_fu_137_p4 = {{vn_V_1_fu_60[63:1]}};

assign tmp_fu_117_p3 = magic_fu_64[32'd6];

assign vn_V_2_fu_156_p4 = {{vn_V_1_fu_60[63:2]}};

assign zext_ln1043_fu_166_p1 = vn_V_2_fu_156_p4;

endmodule //dut_divide_Pipeline_NORMALIZE
