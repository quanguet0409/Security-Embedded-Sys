-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_divide_Pipeline_SHIFT6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln238 : IN STD_LOGIC_VECTOR (5 downto 0);
    r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    r_ce0 : OUT STD_LOGIC;
    r_we0 : OUT STD_LOGIC;
    r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    r_ce1 : OUT STD_LOGIC;
    r_we1 : OUT STD_LOGIC;
    r_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    r_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    sh_prom_i_i_cast_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    sh_prom2_i_i_cast_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    cmp_i9_i : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dut_divide_Pipeline_SHIFT6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal icmp_ln240_2_reg_370 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln240_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_357 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal sh_prom2_i_i_cast_cast_cast_cast_fu_131_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal sh_prom2_i_i_cast_cast_cast_cast_reg_345 : STD_LOGIC_VECTOR (127 downto 0);
    signal sh_prom_i_i_cast_cast_cast_cast_fu_139_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal sh_prom_i_i_cast_cast_cast_cast_reg_351 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_6_fu_165_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln240_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_addr_reg_365 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln240_2_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_addr_1_reg_374 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_load_reg_379 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal k_V_9_reg_385 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1691_fu_268_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1691_reg_391 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal select_ln1691_1_fu_299_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1691_1_reg_396 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1691_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln0_fu_209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_V_fu_66 : STD_LOGIC_VECTOR (127 downto 0);
    signal phitmp1_fu_306_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal x_fu_70 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_5_fu_214_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_x_4 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_fu_74 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln238_cast_fu_143_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln241_2_fu_203_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (6 downto 0);
    signal sh_prom2_i_i_cast_cast_cast_fu_127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_prom_i_i_cast_cast_cast_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_40_fu_176_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln241_fu_186_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_233_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_243_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln1691_fu_250_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln1691_fu_255_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln1691_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1691_1_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln1543_2_fu_275_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln1691_1_fu_281_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln1691_1_fu_286_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln1691_2_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1691_3_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_83 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    j_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((ap_const_boolean_1 = ap_condition_83)) then 
                    j_fu_74 <= add_ln241_2_fu_203_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_74 <= zext_ln238_cast_fu_143_p1;
                end if;
            end if; 
        end if;
    end process;

    k_V_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                k_V_fu_66(64) <= '0';
                k_V_fu_66(65) <= '0';
                k_V_fu_66(66) <= '0';
                k_V_fu_66(67) <= '0';
                k_V_fu_66(68) <= '0';
                k_V_fu_66(69) <= '0';
                k_V_fu_66(70) <= '0';
                k_V_fu_66(71) <= '0';
                k_V_fu_66(72) <= '0';
                k_V_fu_66(73) <= '0';
                k_V_fu_66(74) <= '0';
                k_V_fu_66(75) <= '0';
                k_V_fu_66(76) <= '0';
                k_V_fu_66(77) <= '0';
                k_V_fu_66(78) <= '0';
                k_V_fu_66(79) <= '0';
                k_V_fu_66(80) <= '0';
                k_V_fu_66(81) <= '0';
                k_V_fu_66(82) <= '0';
                k_V_fu_66(83) <= '0';
                k_V_fu_66(84) <= '0';
                k_V_fu_66(85) <= '0';
                k_V_fu_66(86) <= '0';
                k_V_fu_66(87) <= '0';
                k_V_fu_66(88) <= '0';
                k_V_fu_66(89) <= '0';
                k_V_fu_66(90) <= '0';
                k_V_fu_66(91) <= '0';
                k_V_fu_66(92) <= '0';
                k_V_fu_66(93) <= '0';
                k_V_fu_66(94) <= '0';
                k_V_fu_66(95) <= '0';
                k_V_fu_66(96) <= '0';
                k_V_fu_66(97) <= '0';
                k_V_fu_66(98) <= '0';
                k_V_fu_66(99) <= '0';
                k_V_fu_66(100) <= '0';
                k_V_fu_66(101) <= '0';
                k_V_fu_66(102) <= '0';
                k_V_fu_66(103) <= '0';
                k_V_fu_66(104) <= '0';
                k_V_fu_66(105) <= '0';
                k_V_fu_66(106) <= '0';
                k_V_fu_66(107) <= '0';
                k_V_fu_66(108) <= '0';
                k_V_fu_66(109) <= '0';
                k_V_fu_66(110) <= '0';
                k_V_fu_66(111) <= '0';
                k_V_fu_66(112) <= '0';
                k_V_fu_66(113) <= '0';
                k_V_fu_66(114) <= '0';
                k_V_fu_66(115) <= '0';
                k_V_fu_66(116) <= '0';
                k_V_fu_66(117) <= '0';
                k_V_fu_66(118) <= '0';
                k_V_fu_66(119) <= '0';
                k_V_fu_66(120) <= '0';
                k_V_fu_66(121) <= '0';
                k_V_fu_66(122) <= '0';
                k_V_fu_66(123) <= '0';
                k_V_fu_66(124) <= '0';
                k_V_fu_66(125) <= '0';
                k_V_fu_66(126) <= '0';
                k_V_fu_66(127) <= '0';
            elsif (((tmp_6_reg_357 = ap_const_lv1_0) and (icmp_ln240_reg_361 = ap_const_lv1_0) and (icmp_ln240_2_reg_370 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                                k_V_fu_66(127 downto 64) <= phitmp1_fu_306_p3(127 downto 64);
            end if; 
        end if;
    end process;

    x_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((ap_const_boolean_1 = ap_condition_83)) then 
                    x_fu_70 <= x_5_fu_214_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_70 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln240_fu_180_p2 = ap_const_lv1_0) and (tmp_6_fu_165_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln240_2_reg_370 <= icmp_ln240_2_fu_197_p2;
                r_addr_reg_365 <= zext_ln1691_fu_192_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_165_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln240_reg_361 <= icmp_ln240_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_reg_357 = ap_const_lv1_0) and (icmp_ln240_reg_361 = ap_const_lv1_0) and (icmp_ln240_2_reg_370 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                k_V_9_reg_385 <= r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln240_2_fu_197_p2 = ap_const_lv1_0) and (icmp_ln240_fu_180_p2 = ap_const_lv1_0) and (tmp_6_fu_165_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                r_addr_1_reg_374 <= zext_ln0_fu_209_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_reg_357 = ap_const_lv1_0) and (icmp_ln240_reg_361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                r_load_reg_379 <= r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_reg_357 = ap_const_lv1_0) and (icmp_ln240_reg_361 = ap_const_lv1_0) and (icmp_ln240_2_reg_370 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                select_ln1691_1_reg_396 <= select_ln1691_1_fu_299_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_reg_357 = ap_const_lv1_0) and (icmp_ln240_reg_361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                select_ln1691_reg_391 <= select_ln1691_fu_268_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    sh_prom2_i_i_cast_cast_cast_cast_reg_345(31 downto 0) <= sh_prom2_i_i_cast_cast_cast_cast_fu_131_p1(31 downto 0);
                    sh_prom_i_i_cast_cast_cast_cast_reg_351(31 downto 0) <= sh_prom_i_i_cast_cast_cast_cast_fu_139_p1(31 downto 0);
                tmp_6_reg_357 <= ap_sig_allocacmp_x_4(5 downto 5);
            end if;
        end if;
    end process;
    sh_prom2_i_i_cast_cast_cast_cast_reg_345(127 downto 32) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    sh_prom_i_i_cast_cast_cast_cast_reg_351(127 downto 32) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    k_V_fu_66(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln241_2_fu_203_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_load) + unsigned(ap_const_lv7_7E));
    add_ln241_fu_186_p2 <= std_logic_vector(unsigned(empty_40_fu_176_p1) + unsigned(ap_const_lv5_1F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_83_assign_proc : process(tmp_6_fu_165_p3, icmp_ln240_fu_180_p2, icmp_ln240_2_fu_197_p2)
    begin
                ap_condition_83 <= ((icmp_ln240_2_fu_197_p2 = ap_const_lv1_0) and (icmp_ln240_fu_180_p2 = ap_const_lv1_0) and (tmp_6_fu_165_p3 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_CS_fsm_state4, icmp_ln240_2_reg_370, icmp_ln240_reg_361, tmp_6_reg_357)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((tmp_6_reg_357 = ap_const_lv1_1) or ((icmp_ln240_reg_361 = ap_const_lv1_1) or (icmp_ln240_2_reg_370 = ap_const_lv1_1))))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state4, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, j_fu_74, zext_ln238_cast_fu_143_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= zext_ln238_cast_fu_143_p1;
        else 
            ap_sig_allocacmp_j_load <= j_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_x_4_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, x_fu_70)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_x_4 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_x_4 <= x_fu_70;
        end if; 
    end process;

    empty_40_fu_176_p1 <= ap_sig_allocacmp_j_load(5 - 1 downto 0);
    icmp_ln240_2_fu_197_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv7_1) else "0";
    icmp_ln240_fu_180_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv7_0) else "0";
    lshr_ln1691_1_fu_281_p2 <= std_logic_vector(shift_right(unsigned(or_ln1543_2_fu_275_p3),to_integer(unsigned('0' & sh_prom_i_i_cast_cast_cast_cast_reg_351(31-1 downto 0)))));
    lshr_ln1691_fu_250_p2 <= std_logic_vector(shift_right(unsigned(or_ln_fu_243_p3),to_integer(unsigned('0' & sh_prom_i_i_cast_cast_cast_cast_reg_351(31-1 downto 0)))));
    or_ln1543_2_fu_275_p3 <= (r_load_reg_379 & k_V_9_reg_385);
    or_ln_fu_243_p3 <= (tmp_fu_233_p4 & r_load_reg_379);
    phitmp1_fu_306_p3 <= (k_V_9_reg_385 & ap_const_lv64_0);

    r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln240_2_reg_370, icmp_ln240_reg_361, tmp_6_reg_357, tmp_6_fu_165_p3, icmp_ln240_fu_180_p2, icmp_ln240_2_fu_197_p2, r_addr_1_reg_374, zext_ln0_fu_209_p1)
    begin
        if (((tmp_6_reg_357 = ap_const_lv1_0) and (icmp_ln240_reg_361 = ap_const_lv1_0) and (icmp_ln240_2_reg_370 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            r_address0 <= r_addr_1_reg_374;
        elsif (((icmp_ln240_2_fu_197_p2 = ap_const_lv1_0) and (icmp_ln240_fu_180_p2 = ap_const_lv1_0) and (tmp_6_fu_165_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_address0 <= zext_ln0_fu_209_p1(5 - 1 downto 0);
        else 
            r_address0 <= "XXXXX";
        end if; 
    end process;


    r_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln240_reg_361, tmp_6_reg_357, tmp_6_fu_165_p3, icmp_ln240_fu_180_p2, r_addr_reg_365, zext_ln1691_fu_192_p1)
    begin
        if (((tmp_6_reg_357 = ap_const_lv1_0) and (icmp_ln240_reg_361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            r_address1 <= r_addr_reg_365;
        elsif (((icmp_ln240_fu_180_p2 = ap_const_lv1_0) and (tmp_6_fu_165_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_address1 <= zext_ln1691_fu_192_p1(5 - 1 downto 0);
        else 
            r_address1 <= "XXXXX";
        end if; 
    end process;


    r_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln240_2_reg_370, icmp_ln240_reg_361, tmp_6_reg_357, tmp_6_fu_165_p3, icmp_ln240_fu_180_p2, icmp_ln240_2_fu_197_p2, ap_start_int)
    begin
        if ((((tmp_6_reg_357 = ap_const_lv1_0) and (icmp_ln240_reg_361 = ap_const_lv1_0) and (icmp_ln240_2_reg_370 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln240_2_fu_197_p2 = ap_const_lv1_0) and (icmp_ln240_fu_180_p2 = ap_const_lv1_0) and (tmp_6_fu_165_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            r_ce0 <= ap_const_logic_1;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_ce1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln240_reg_361, tmp_6_reg_357, tmp_6_fu_165_p3, icmp_ln240_fu_180_p2, ap_start_int)
    begin
        if ((((tmp_6_reg_357 = ap_const_lv1_0) and (icmp_ln240_reg_361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln240_fu_180_p2 = ap_const_lv1_0) and (tmp_6_fu_165_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            r_ce1 <= ap_const_logic_1;
        else 
            r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    r_d0 <= select_ln1691_1_reg_396;
    r_d1 <= select_ln1691_reg_391;

    r_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln240_2_reg_370, icmp_ln240_reg_361, tmp_6_reg_357)
    begin
        if (((tmp_6_reg_357 = ap_const_lv1_0) and (icmp_ln240_reg_361 = ap_const_lv1_0) and (icmp_ln240_2_reg_370 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            r_we0 <= ap_const_logic_1;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_we1_assign_proc : process(ap_CS_fsm_state4, icmp_ln240_reg_361, tmp_6_reg_357)
    begin
        if (((tmp_6_reg_357 = ap_const_lv1_0) and (icmp_ln240_reg_361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            r_we1 <= ap_const_logic_1;
        else 
            r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1691_1_fu_299_p3 <= 
        trunc_ln1691_2_fu_291_p1 when (cmp_i9_i(0) = '1') else 
        trunc_ln1691_3_fu_295_p1;
    select_ln1691_fu_268_p3 <= 
        trunc_ln1691_fu_260_p1 when (cmp_i9_i(0) = '1') else 
        trunc_ln1691_1_fu_264_p1;
    sh_prom2_i_i_cast_cast_cast_cast_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom2_i_i_cast_cast_cast_fu_127_p1),128));
        sh_prom2_i_i_cast_cast_cast_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_prom2_i_i_cast_cast),32));

    sh_prom_i_i_cast_cast_cast_cast_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_cast_cast_cast_fu_135_p1),128));
        sh_prom_i_i_cast_cast_cast_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_prom_i_i_cast_cast),32));

    shl_ln1691_1_fu_286_p2 <= std_logic_vector(shift_left(unsigned(or_ln1543_2_fu_275_p3),to_integer(unsigned('0' & sh_prom2_i_i_cast_cast_cast_cast_reg_345(31-1 downto 0)))));
    shl_ln1691_fu_255_p2 <= std_logic_vector(shift_left(unsigned(or_ln_fu_243_p3),to_integer(unsigned('0' & sh_prom2_i_i_cast_cast_cast_cast_reg_345(31-1 downto 0)))));
    tmp_6_fu_165_p3 <= ap_sig_allocacmp_x_4(5 downto 5);
    tmp_fu_233_p4 <= k_V_fu_66(127 downto 64);
    trunc_ln1691_1_fu_264_p1 <= shl_ln1691_fu_255_p2(64 - 1 downto 0);
    trunc_ln1691_2_fu_291_p1 <= lshr_ln1691_1_fu_281_p2(64 - 1 downto 0);
    trunc_ln1691_3_fu_295_p1 <= shl_ln1691_1_fu_286_p2(64 - 1 downto 0);
    trunc_ln1691_fu_260_p1 <= lshr_ln1691_fu_250_p2(64 - 1 downto 0);
    x_5_fu_214_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_4) + unsigned(ap_const_lv6_2));
    zext_ln0_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln241_2_fu_203_p2),64));
    zext_ln1691_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln241_fu_186_p2),64));
    zext_ln238_cast_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln238),7));
end behav;
