-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_divide_Pipeline_PARTIAL is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    v_ce0 : OUT STD_LOGIC;
    v_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    v_ce1 : OUT STD_LOGIC;
    v_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln146 : IN STD_LOGIC_VECTOR (63 downto 0);
    w_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    w_digits_data_V_ce0 : OUT STD_LOGIC;
    w_digits_data_V_we0 : OUT STD_LOGIC;
    w_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    zext_ln110 : IN STD_LOGIC_VECTOR (5 downto 0);
    n : IN STD_LOGIC_VECTOR (5 downto 0);
    k_V_13_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    k_V_13_out_ap_vld : OUT STD_LOGIC;
    k_V_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    k_V_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of dut_divide_Pipeline_PARTIAL is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln146_cast_fu_172_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln146_cast_reg_331 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_fu_189_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_337 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_337_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_337_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_337_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast24_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast24_reg_341 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast24_reg_341_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast24_reg_341_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln153_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_reg_346 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_reg_346_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_reg_346_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_reg_346_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln153_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_reg_355 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_reg_355_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_reg_355_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_reg_355_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln153_1_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_1_reg_360 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_1_reg_360_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_1_reg_360_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_1_reg_360_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal v_load_reg_369 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal v_load_66_reg_374 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln885_reg_389 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_load_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_V_13_load_1_reg_394 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal trunc_ln223_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln223_reg_399 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_V_14_reg_404 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_253_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln885_2_reg_410 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln223_2_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln223_2_reg_415 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln149_1_reg_420 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_predicate_tran8to10_state3 : BOOLEAN;
    signal ap_predicate_tran8to11_state3 : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_UnifiedRetVal_phi_fu_157_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal UnifiedRetVal_reg_152 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal k_V_13_fu_66 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_allocacmp_k_V_13_load_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_70 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln151_fu_231_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_44_fu_202_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln151_fu_211_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln153_1_fu_222_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_245_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_253_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_V_15_cast_fu_258_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal k_V_fu_262_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln1043_fu_281_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal k_V_15_fu_284_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_exit_tran_regpp0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_245_p10 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_253_p10 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component dut_mul_64ns_64ns_128_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;



begin
    mul_64ns_64ns_128_3_1_U27 : component dut_mul_64ns_64ns_128_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_245_p0,
        din1 => grp_fu_245_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_245_p2);

    mul_64ns_64ns_128_3_1_U28 : component dut_mul_64ns_64ns_128_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_253_p0,
        din1 => grp_fu_253_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_253_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv2_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_157_p6;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                UnifiedRetVal_reg_152 <= ap_const_lv2_2;
            elsif (((icmp_ln153_reg_346 = ap_const_lv1_1) and (tmp_reg_337 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                UnifiedRetVal_reg_152 <= ap_const_lv2_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                UnifiedRetVal_reg_152 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ap_exit_tran_regpp0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if ((tmp_reg_337 = ap_const_lv1_1)) then 
                    ap_exit_tran_regpp0(0) <= '0';
                    ap_exit_tran_regpp0(1) <= '1';
                elsif ((ap_predicate_tran8to11_state3 = ap_const_boolean_1)) then 
                    ap_exit_tran_regpp0(0) <= '1';
                    ap_exit_tran_regpp0(1) <= '0';
                elsif ((ap_predicate_tran8to10_state3 = ap_const_boolean_1)) then 
                    ap_exit_tran_regpp0(0) <= '0';
                    ap_exit_tran_regpp0(1) <= '0';
                end if;
            end if; 
        end if;
    end process;

    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_70 <= ap_const_lv6_0;
            elsif (((icmp_ln153_fu_206_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_189_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln153_1_fu_226_p2 = ap_const_lv1_1))) then 
                i_fu_70 <= add_ln151_fu_231_p2;
            end if; 
        end if;
    end process;

    k_V_13_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_V_13_fu_66 <= ap_const_lv64_0;
            elsif (((icmp_ln153_reg_346_pp0_iter3_reg = ap_const_lv1_1) and (tmp_reg_337_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln153_1_reg_360_pp0_iter3_reg = ap_const_lv1_1))) then 
                k_V_13_fu_66 <= trunc_ln149_1_reg_420;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_fu_189_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_cast24_reg_341(5 downto 0) <= i_cast24_fu_197_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_cast24_reg_341_pp0_iter1_reg(5 downto 0) <= i_cast24_reg_341(5 downto 0);
                    i_cast24_reg_341_pp0_iter2_reg(5 downto 0) <= i_cast24_reg_341_pp0_iter1_reg(5 downto 0);
                icmp_ln153_1_reg_360_pp0_iter1_reg <= icmp_ln153_1_reg_360;
                icmp_ln153_1_reg_360_pp0_iter2_reg <= icmp_ln153_1_reg_360_pp0_iter1_reg;
                icmp_ln153_1_reg_360_pp0_iter3_reg <= icmp_ln153_1_reg_360_pp0_iter2_reg;
                icmp_ln153_reg_346_pp0_iter1_reg <= icmp_ln153_reg_346;
                icmp_ln153_reg_346_pp0_iter2_reg <= icmp_ln153_reg_346_pp0_iter1_reg;
                icmp_ln153_reg_346_pp0_iter3_reg <= icmp_ln153_reg_346_pp0_iter2_reg;
                tmp_reg_337_pp0_iter1_reg <= tmp_reg_337;
                tmp_reg_337_pp0_iter2_reg <= tmp_reg_337_pp0_iter1_reg;
                tmp_reg_337_pp0_iter3_reg <= tmp_reg_337_pp0_iter2_reg;
                    zext_ln153_reg_355_pp0_iter1_reg(4 downto 1) <= zext_ln153_reg_355(4 downto 1);
                    zext_ln153_reg_355_pp0_iter2_reg(4 downto 1) <= zext_ln153_reg_355_pp0_iter1_reg(4 downto 1);
                    zext_ln153_reg_355_pp0_iter3_reg(4 downto 1) <= zext_ln153_reg_355_pp0_iter2_reg(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln153_fu_206_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_fu_189_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln153_1_reg_360 <= icmp_ln153_1_fu_226_p2;
                    zext_ln153_reg_355(4 downto 1) <= zext_ln153_fu_217_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_189_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln153_reg_346 <= icmp_ln153_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_337_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                k_V_13_load_1_reg_394 <= grp_load_fu_168_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln153_reg_346_pp0_iter2_reg = ap_const_lv1_1) and (tmp_reg_337_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                k_V_14_reg_404 <= k_V_fu_262_p2(127 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln153_reg_346_pp0_iter2_reg = ap_const_lv1_1) and (tmp_reg_337_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln153_1_reg_360_pp0_iter2_reg = ap_const_lv1_1))) then
                mul_ln885_2_reg_410 <= grp_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln153_reg_346_pp0_iter1_reg = ap_const_lv1_1) and (tmp_reg_337_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln885_reg_389 <= grp_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_337 <= i_fu_70(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln153_reg_346_pp0_iter2_reg = ap_const_lv1_1) and (tmp_reg_337_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln153_1_reg_360_pp0_iter2_reg = ap_const_lv1_1))) then
                trunc_ln149_1_reg_420 <= k_V_15_fu_284_p2(127 downto 64);
                trunc_ln223_2_reg_415 <= trunc_ln223_2_fu_289_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln153_reg_346_pp0_iter2_reg = ap_const_lv1_1) and (tmp_reg_337_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                trunc_ln223_reg_399 <= trunc_ln223_fu_267_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln153_reg_346 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_reg_337 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln153_1_reg_360 = ap_const_lv1_1))) then
                v_load_66_reg_374 <= v_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln153_reg_346 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_reg_337 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                v_load_reg_369 <= v_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    zext_ln146_cast_reg_331(63 downto 0) <= zext_ln146_cast_fu_172_p1(63 downto 0);
            end if;
        end if;
    end process;
    zext_ln146_cast_reg_331(127 downto 64) <= "0000000000000000000000000000000000000000000000000000000000000000";
    i_cast24_reg_341(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_cast24_reg_341_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_cast24_reg_341_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln153_reg_355(0) <= '1';
    zext_ln153_reg_355(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln153_reg_355_pp0_iter1_reg(0) <= '1';
    zext_ln153_reg_355_pp0_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln153_reg_355_pp0_iter2_reg(0) <= '1';
    zext_ln153_reg_355_pp0_iter2_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln153_reg_355_pp0_iter3_reg(0) <= '1';
    zext_ln153_reg_355_pp0_iter3_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    ap_exit_tran_regpp0(2) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3, ap_exit_tran_regpp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_exit_tran_regpp0 = ap_const_lv3_2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_exit_tran_regpp0 = ap_const_lv3_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_exit_tran_regpp0 = ap_const_lv3_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln151_fu_231_p2 <= std_logic_vector(unsigned(i_fu_70) + unsigned(ap_const_lv6_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(3);
    ap_CS_fsm_state11 <= ap_CS_fsm(4);
    ap_CS_fsm_state12 <= ap_CS_fsm(5);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_flush_enable_assign_proc : process(tmp_reg_337, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_predicate_tran8to10_state3, ap_predicate_tran8to11_state3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and ((tmp_reg_337 = ap_const_lv1_1) or (ap_predicate_tran8to11_state3 = ap_const_boolean_1) or (ap_predicate_tran8to10_state3 = ap_const_boolean_1)))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_UnifiedRetVal_phi_fu_157_p6_assign_proc : process(tmp_reg_337, icmp_ln153_reg_346, UnifiedRetVal_reg_152, ap_CS_fsm_state10)
    begin
        if (((icmp_ln153_reg_346 = ap_const_lv1_1) and (tmp_reg_337 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_157_p6 <= ap_const_lv2_1;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_157_p6 <= UnifiedRetVal_reg_152;
        end if; 
    end process;


    ap_predicate_tran8to10_state3_assign_proc : process(tmp_reg_337, icmp_ln153_reg_346, icmp_ln153_1_reg_360)
    begin
                ap_predicate_tran8to10_state3 <= ((icmp_ln153_reg_346 = ap_const_lv1_1) and (tmp_reg_337 = ap_const_lv1_0) and (icmp_ln153_1_reg_360 = ap_const_lv1_0));
    end process;


    ap_predicate_tran8to11_state3_assign_proc : process(tmp_reg_337, icmp_ln153_reg_346)
    begin
                ap_predicate_tran8to11_state3 <= ((icmp_ln153_reg_346 = ap_const_lv1_0) and (tmp_reg_337 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_UnifiedRetVal_phi_fu_157_p6, ap_CS_fsm_state10, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_157_p6;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_allocacmp_k_V_13_load_1_assign_proc : process(tmp_reg_337_pp0_iter3_reg, icmp_ln153_reg_346_pp0_iter3_reg, icmp_ln153_1_reg_360_pp0_iter3_reg, ap_CS_fsm_pp0_stage1, trunc_ln149_1_reg_420, ap_enable_reg_pp0_iter3, ap_block_pp0_stage1, k_V_13_fu_66)
    begin
        if (((icmp_ln153_reg_346_pp0_iter3_reg = ap_const_lv1_1) and (tmp_reg_337_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln153_1_reg_360_pp0_iter3_reg = ap_const_lv1_1))) then 
            ap_sig_allocacmp_k_V_13_load_1 <= trunc_ln149_1_reg_420;
        else 
            ap_sig_allocacmp_k_V_13_load_1 <= k_V_13_fu_66;
        end if; 
    end process;

    empty_44_fu_202_p1 <= i_fu_70(5 - 1 downto 0);
    grp_fu_245_p0 <= zext_ln146_cast_reg_331(64 - 1 downto 0);
    grp_fu_245_p1 <= grp_fu_245_p10(64 - 1 downto 0);
    grp_fu_245_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_load_reg_369),128));
    grp_fu_253_p0 <= zext_ln146_cast_reg_331(64 - 1 downto 0);
    grp_fu_253_p1 <= grp_fu_253_p10(64 - 1 downto 0);
    grp_fu_253_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_load_66_reg_374),128));

    grp_load_fu_168_p1_assign_proc : process(tmp_reg_337, tmp_reg_337_pp0_iter2_reg, icmp_ln153_reg_346, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_block_pp0_stage1, k_V_13_fu_66, ap_sig_allocacmp_k_V_13_load_1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln153_reg_346 = ap_const_lv1_1) and (tmp_reg_337 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            grp_load_fu_168_p1 <= k_V_13_fu_66;
        elsif (((tmp_reg_337_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_load_fu_168_p1 <= ap_sig_allocacmp_k_V_13_load_1;
        else 
            grp_load_fu_168_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_cast24_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_70),64));
    icmp_ln153_1_fu_226_p2 <= "1" when (unsigned(zext_ln153_1_fu_222_p1) < unsigned(zext_ln110)) else "0";
    icmp_ln153_fu_206_p2 <= "1" when (unsigned(i_fu_70) < unsigned(n)) else "0";

    k_V_13_out_assign_proc : process(tmp_reg_337, icmp_ln153_reg_346, grp_load_fu_168_p1, k_V_13_load_1_reg_394, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            k_V_13_out <= k_V_13_load_1_reg_394;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln153_reg_346 = ap_const_lv1_1) and (tmp_reg_337 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            k_V_13_out <= grp_load_fu_168_p1;
        else 
            k_V_13_out <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    k_V_13_out_ap_vld_assign_proc : process(tmp_reg_337, icmp_ln153_reg_346, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln153_reg_346 = ap_const_lv1_1) and (tmp_reg_337 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            k_V_13_out_ap_vld <= ap_const_logic_1;
        else 
            k_V_13_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    k_V_15_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_load_fu_168_p1),128));
    k_V_15_fu_284_p2 <= std_logic_vector(unsigned(mul_ln885_2_reg_410) + unsigned(zext_ln1043_fu_281_p1));
    k_V_fu_262_p2 <= std_logic_vector(unsigned(mul_ln885_reg_389) + unsigned(k_V_15_cast_fu_258_p1));
    k_V_out <= k_V_14_reg_404;

    k_V_out_ap_vld_assign_proc : process(tmp_reg_337, icmp_ln153_reg_346, ap_CS_fsm_state10)
    begin
        if (((icmp_ln153_reg_346 = ap_const_lv1_1) and (tmp_reg_337 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            k_V_out_ap_vld <= ap_const_logic_1;
        else 
            k_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln151_fu_211_p2 <= (empty_44_fu_202_p1 or ap_const_lv5_1);
    tmp_fu_189_p3 <= i_fu_70(5 downto 5);
    trunc_ln223_2_fu_289_p1 <= k_V_15_fu_284_p2(64 - 1 downto 0);
    trunc_ln223_fu_267_p1 <= k_V_fu_262_p2(64 - 1 downto 0);
    v_address0 <= zext_ln153_fu_217_p1(5 - 1 downto 0);
    v_address1 <= i_cast24_fu_197_p1(5 - 1 downto 0);

    v_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v_ce0 <= ap_const_logic_1;
        else 
            v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v_ce1 <= ap_const_logic_1;
        else 
            v_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast24_reg_341_pp0_iter2_reg, zext_ln153_reg_355_pp0_iter3_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                w_digits_data_V_address0 <= zext_ln153_reg_355_pp0_iter3_reg(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                w_digits_data_V_address0 <= i_cast24_reg_341_pp0_iter2_reg(5 - 1 downto 0);
            else 
                w_digits_data_V_address0 <= "XXXXX";
            end if;
        else 
            w_digits_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    w_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            w_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            w_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_V_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, trunc_ln223_reg_399, trunc_ln223_2_reg_415, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                w_digits_data_V_d0 <= trunc_ln223_2_reg_415;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                w_digits_data_V_d0 <= trunc_ln223_reg_399;
            else 
                w_digits_data_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            w_digits_data_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w_digits_data_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_reg_337_pp0_iter2_reg, tmp_reg_337_pp0_iter3_reg, icmp_ln153_reg_346_pp0_iter2_reg, icmp_ln153_reg_346_pp0_iter3_reg, icmp_ln153_1_reg_360_pp0_iter3_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((icmp_ln153_reg_346_pp0_iter3_reg = ap_const_lv1_1) and (tmp_reg_337_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln153_1_reg_360_pp0_iter3_reg = ap_const_lv1_1)) or ((icmp_ln153_reg_346_pp0_iter2_reg = ap_const_lv1_1) and (tmp_reg_337_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            w_digits_data_V_we0 <= ap_const_logic_1;
        else 
            w_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1043_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_V_14_reg_404),128));
    zext_ln146_cast_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln146),128));
    zext_ln153_1_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln151_fu_211_p2),6));
    zext_ln153_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln151_fu_211_p2),64));
end behav;
