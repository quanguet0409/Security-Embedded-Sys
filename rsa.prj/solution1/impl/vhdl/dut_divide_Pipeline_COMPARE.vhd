-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_divide_Pipeline_COMPARE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln110 : IN STD_LOGIC_VECTOR (5 downto 0);
    w_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    w_digits_data_V_ce0 : OUT STD_LOGIC;
    w_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sext_ln143 : IN STD_LOGIC_VECTOR (6 downto 0);
    r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    r_ce0 : OUT STD_LOGIC;
    r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    i_4_out : OUT STD_LOGIC_VECTOR (6 downto 0);
    i_4_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of dut_divide_Pipeline_COMPARE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sext_ln143_cast_fu_207_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln143_cast_reg_392 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_reg_398 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_228_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_403 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_45_fu_236_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_45_reg_407 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln167_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_reg_412 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_416 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_2_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_2_reg_425 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln1068_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1068_reg_444 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln167_1_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_1_reg_448 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln167_1_fu_326_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln167_1_reg_452 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln66_3_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_3_reg_457 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal w_digits_data_V_load_1_reg_471 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_0_reg_147 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_ref_tmp44_0_phi_fu_161_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp44_0_reg_158 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_0_1_reg_168 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_UnifiedRetVal_phi_fu_186_p10 : STD_LOGIC_VECTOR (2 downto 0);
    signal UnifiedRetVal_reg_179 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln0_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln167_cast27_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln165_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln0_32_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_76 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_3_fu_362_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln1068_92_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_80 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_356_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln110_cast_fu_211_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_45_fu_236_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln167_cast27_fu_240_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln167_cast_fu_245_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln167_fu_249_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln167_cast_fu_245_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln167_fu_255_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_265_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_284_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln170_fu_306_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln165_fu_316_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_331_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_condition_133 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv3_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_186_p10;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                UnifiedRetVal_reg_179 <= ap_const_lv3_4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                UnifiedRetVal_reg_179 <= ap_const_lv3_3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                UnifiedRetVal_reg_179 <= ap_const_lv3_2;
            elsif (((icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln167_1_reg_448 = ap_const_lv1_0) and (icmp_ln1068_reg_444 = ap_const_lv1_1))) then 
                UnifiedRetVal_reg_179 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                UnifiedRetVal_reg_179 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_4_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_4_fu_80 <= zext_ln110_cast_fu_211_p1;
            elsif (((icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (icmp_ln1068_92_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln167_1_reg_448 = ap_const_lv1_0) and (icmp_ln1068_reg_444 = ap_const_lv1_1))) then 
                i_4_fu_80 <= i_fu_356_p2;
            end if; 
        end if;
    end process;

    ref_tmp44_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0))) then
                if (((icmp_ln66_2_reg_425 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ref_tmp44_0_reg_158 <= ap_const_lv64_0;
                elsif (((icmp_ln66_2_reg_425 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ref_tmp44_0_reg_158 <= w_digits_data_V_q0;
                end if;
            end if; 
        end if;
    end process;

    tmp_0_1_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_133)) then
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln66_3_reg_457 = ap_const_lv1_0))) then 
                    tmp_0_1_reg_168 <= ap_const_lv64_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln66_3_reg_457 = ap_const_lv1_1))) then 
                    tmp_0_1_reg_168 <= r_q0;
                end if;
            end if; 
        end if;
    end process;

    tmp_0_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_275_p2 = ap_const_lv1_0) and (icmp_ln167_fu_249_p2 = ap_const_lv1_0) and (tmp_fu_228_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                tmp_0_reg_147 <= ap_const_lv64_0;
            elsif (((icmp_ln66_reg_416 = ap_const_lv1_1) and (icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tmp_0_reg_147 <= r_q0;
            end if; 
        end if;
    end process;

    y_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_fu_76 <= ap_const_lv6_0;
            elsif (((icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (icmp_ln1068_92_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln167_1_reg_448 = ap_const_lv1_0) and (icmp_ln1068_reg_444 = ap_const_lv1_1))) then 
                y_fu_76 <= y_3_fu_362_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln167_1_fu_320_p2 = ap_const_lv1_0) and (icmp_ln1068_fu_300_p2 = ap_const_lv1_1))) then
                add_ln167_1_reg_452 <= add_ln167_1_fu_326_p2;
                icmp_ln66_3_reg_457 <= icmp_ln66_3_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_228_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                empty_45_reg_407 <= empty_45_fu_236_p1;
                icmp_ln167_reg_412 <= icmp_ln167_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                icmp_ln1068_reg_444 <= icmp_ln1068_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1068_fu_300_p2 = ap_const_lv1_1))) then
                icmp_ln167_1_reg_448 <= icmp_ln167_1_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_fu_249_p2 = ap_const_lv1_0) and (tmp_fu_228_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln66_2_reg_425 <= icmp_ln66_2_fu_294_p2;
                icmp_ln66_reg_416 <= icmp_ln66_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                sext_ln143_cast_reg_392 <= sext_ln143_cast_fu_207_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_reg_403 <= y_fu_76(5 downto 5);
                y_2_reg_398 <= y_fu_76;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln167_1_reg_448 = ap_const_lv1_0) and (icmp_ln1068_reg_444 = ap_const_lv1_1))) then
                w_digits_data_V_load_1_reg_471 <= w_digits_data_V_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_reg_403, icmp_ln167_reg_412, icmp_ln1068_reg_444, icmp_ln167_1_reg_448, ap_CS_fsm_state7, icmp_ln1068_92_fu_351_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (icmp_ln1068_92_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln167_1_reg_448 = ap_const_lv1_0) and (icmp_ln1068_reg_444 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((tmp_reg_403 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((icmp_ln167_reg_412 = ap_const_lv1_1) and (tmp_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1068_reg_444 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln167_1_reg_448 = ap_const_lv1_1) and (icmp_ln1068_reg_444 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln167_1_fu_326_p2 <= std_logic_vector(signed(sext_ln165_fu_316_p1) + signed(sext_ln143_cast_reg_392));
    add_ln167_fu_255_p2 <= std_logic_vector(signed(trunc_ln167_cast_fu_245_p1) + signed(sext_ln143_cast_reg_392));
    add_ln170_fu_306_p2 <= std_logic_vector(unsigned(empty_45_reg_407) + unsigned(ap_const_lv6_3F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_condition_133_assign_proc : process(tmp_reg_403, icmp_ln167_reg_412, icmp_ln1068_reg_444, icmp_ln167_1_reg_448)
    begin
                ap_condition_133 <= ((icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (icmp_ln167_1_reg_448 = ap_const_lv1_0) and (icmp_ln1068_reg_444 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_UnifiedRetVal_phi_fu_186_p10_assign_proc : process(tmp_reg_403, icmp_ln167_reg_412, icmp_ln1068_reg_444, icmp_ln167_1_reg_448, UnifiedRetVal_reg_179, ap_CS_fsm_state8)
    begin
        if (((icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln167_1_reg_448 = ap_const_lv1_0) and (icmp_ln1068_reg_444 = ap_const_lv1_1))) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_186_p10 <= ap_const_lv3_1;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_186_p10 <= UnifiedRetVal_reg_179;
        end if; 
    end process;


    ap_phi_mux_ref_tmp44_0_phi_fu_161_p4_assign_proc : process(tmp_reg_403, icmp_ln167_reg_412, icmp_ln66_2_reg_425, ap_CS_fsm_state4, ref_tmp44_0_reg_158)
    begin
        if (((icmp_ln66_2_reg_425 = ap_const_lv1_1) and (icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_phi_mux_ref_tmp44_0_phi_fu_161_p4 <= ap_const_lv64_0;
        else 
            ap_phi_mux_ref_tmp44_0_phi_fu_161_p4 <= ref_tmp44_0_reg_158;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_UnifiedRetVal_phi_fu_186_p10, ap_CS_fsm_state8, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_186_p10;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    empty_45_fu_236_p0 <= i_4_fu_80;
    empty_45_fu_236_p1 <= empty_45_fu_236_p0(6 - 1 downto 0);

    i_4_out_assign_proc : process(tmp_reg_403, icmp_ln167_reg_412, icmp_ln1068_reg_444, icmp_ln167_1_reg_448, ap_CS_fsm_state12, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, i_4_fu_80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            i_4_out <= ap_const_lv7_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            i_4_out <= ap_const_lv7_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln167_1_reg_448 = ap_const_lv1_0) and (icmp_ln1068_reg_444 = ap_const_lv1_1)))) then 
            i_4_out <= i_4_fu_80;
        else 
            i_4_out <= "XXXXXXX";
        end if; 
    end process;


    i_4_out_ap_vld_assign_proc : process(tmp_reg_403, icmp_ln167_reg_412, icmp_ln1068_reg_444, icmp_ln167_1_reg_448, ap_CS_fsm_state12, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln167_reg_412 = ap_const_lv1_0) and (tmp_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln167_1_reg_448 = ap_const_lv1_0) and (icmp_ln1068_reg_444 = ap_const_lv1_1)))) then 
            i_4_out_ap_vld <= ap_const_logic_1;
        else 
            i_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_356_p2 <= std_logic_vector(unsigned(i_4_fu_80) + unsigned(ap_const_lv7_7E));
    icmp_ln1068_92_fu_351_p2 <= "1" when (tmp_0_1_reg_168 = w_digits_data_V_load_1_reg_471) else "0";
    icmp_ln1068_fu_300_p2 <= "1" when (tmp_0_reg_147 = ap_phi_mux_ref_tmp44_0_phi_fu_161_p4) else "0";
    icmp_ln167_1_fu_320_p2 <= "1" when (i_4_fu_80 = ap_const_lv7_1) else "0";
    icmp_ln167_fu_249_p0 <= i_4_fu_80;
    icmp_ln167_fu_249_p2 <= "1" when (icmp_ln167_fu_249_p0 = ap_const_lv7_0) else "0";
    icmp_ln66_2_fu_294_p2 <= "1" when (tmp_13_fu_284_p4 = ap_const_lv2_1) else "0";
    icmp_ln66_3_fu_341_p2 <= "1" when (signed(tmp_14_fu_331_p4) < signed(ap_const_lv3_1)) else "0";
    icmp_ln66_fu_275_p2 <= "1" when (signed(tmp_12_fu_265_p4) < signed(ap_const_lv3_1)) else "0";

    r_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, zext_ln0_fu_260_p1, zext_ln0_32_fu_347_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_address0 <= zext_ln0_32_fu_347_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_address0 <= zext_ln0_fu_260_p1(5 - 1 downto 0);
        else 
            r_address0 <= "XXXXX";
        end if; 
    end process;


    r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_ce0 <= ap_const_logic_1;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln143_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln143),8));

        sext_ln165_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln170_fu_306_p2),8));

    tmp_12_fu_265_p4 <= add_ln167_fu_255_p2(7 downto 5);
    tmp_13_fu_284_p4 <= i_4_fu_80(6 downto 5);
    tmp_14_fu_331_p4 <= add_ln167_1_fu_326_p2(7 downto 5);
    tmp_fu_228_p3 <= y_fu_76(5 downto 5);
    trunc_ln167_cast27_fu_240_p0 <= i_4_fu_80;
    trunc_ln167_cast27_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln167_cast27_fu_240_p0),64));
    trunc_ln167_cast_fu_245_p0 <= i_4_fu_80;
        trunc_ln167_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln167_cast_fu_245_p0),8));


    w_digits_data_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, trunc_ln167_cast27_fu_240_p1, zext_ln165_fu_311_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            w_digits_data_V_address0 <= zext_ln165_fu_311_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_digits_data_V_address0 <= trunc_ln167_cast27_fu_240_p1(5 - 1 downto 0);
        else 
            w_digits_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    w_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            w_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            w_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_3_fu_362_p2 <= std_logic_vector(unsigned(y_2_reg_398) + unsigned(ap_const_lv6_2));
    zext_ln0_32_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln167_1_reg_452),64));
    zext_ln0_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln167_fu_255_p2),64));
    zext_ln110_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln110),7));
    zext_ln165_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln170_fu_306_p2),64));
end behav;
