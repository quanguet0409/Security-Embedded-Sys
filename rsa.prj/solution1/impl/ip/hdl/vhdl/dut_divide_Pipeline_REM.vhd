-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_divide_Pipeline_REM is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    add_ln141 : IN STD_LOGIC_VECTOR (6 downto 0);
    r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    r_ce0 : OUT STD_LOGIC;
    r_we0 : OUT STD_LOGIC;
    r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    w_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    w_digits_data_V_ce0 : OUT STD_LOGIC;
    w_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    w_digits_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    w_digits_data_V_ce1 : OUT STD_LOGIC;
    w_digits_data_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln110 : IN STD_LOGIC_VECTOR (5 downto 0);
    n : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of dut_divide_Pipeline_REM is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv65_1FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (64 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal icmp_ln196_1_reg_391 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln196_reg_372 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_363 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage5 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal k_V_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_358 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_fu_149_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_V_21_cast_fu_166_p3 : STD_LOGIC_VECTOR (64 downto 0);
    signal k_V_21_cast_reg_367 : STD_LOGIC_VECTOR (64 downto 0);
    signal icmp_ln196_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_376 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_addr_reg_381 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln196_1_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_1_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_1_reg_395 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_addr_3_reg_400 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln66_fu_263_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln66_reg_410 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal w_digits_data_V_load_reg_415 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_digits_data_V_load_1_reg_420 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln223_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln223_reg_425 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal k_V_11_reg_430 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln194_fu_299_p3 : STD_LOGIC_VECTOR (64 downto 0);
    signal select_ln194_reg_435 : STD_LOGIC_VECTOR (64 downto 0);
    signal select_ln66_2_fu_306_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln66_2_reg_440 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_V_12_fu_324_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal k_V_12_reg_445 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal trunc_ln223_1_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln223_1_reg_450 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_k_V_phi_fu_134_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln0_fu_190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_9_cast28_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln0_31_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_fu_64 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln194_fu_341_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal i_9_cast_fu_174_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln197_fu_184_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_195_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_43_fu_162_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln194_fu_211_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln149_2_fu_226_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln149_1_fu_222_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln197_1_fu_236_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_247_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln64_fu_270_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal add_ln229_fu_276_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln229_fu_273_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal k_V_10_fu_281_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln229_1_fu_316_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal zext_ln67_fu_313_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal newFirst_fu_319_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_367 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage5,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_7_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                i_7_fu_64 <= ap_const_lv6_0;
            elsif (((tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (icmp_ln196_1_reg_391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_7_fu_64 <= add_ln194_fu_341_p2;
            end if; 
        end if;
    end process;

    k_V_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                k_V_reg_131 <= ap_const_lv1_0;
            elsif (((tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (icmp_ln196_1_reg_391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                k_V_reg_131 <= k_V_12_reg_445(64 downto 64);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i_reg_358 <= ap_sig_allocacmp_i;
                tmp_reg_363 <= ap_sig_allocacmp_i(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln196_fu_178_p2 = ap_const_lv1_1) and (tmp_fu_149_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln196_1_reg_391 <= icmp_ln196_1_fu_230_p2;
                icmp_ln66_reg_376 <= icmp_ln66_fu_205_p2;
                r_addr_reg_381 <= zext_ln0_fu_190_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_149_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln196_reg_372 <= icmp_ln196_fu_178_p2;
                k_V_21_cast_reg_367 <= k_V_21_cast_fu_166_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln196_1_fu_230_p2 = ap_const_lv1_1) and (icmp_ln196_fu_178_p2 = ap_const_lv1_1) and (tmp_fu_149_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln66_1_reg_395 <= icmp_ln66_1_fu_257_p2;
                r_addr_3_reg_400 <= zext_ln0_31_fu_242_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                k_V_11_reg_430 <= k_V_10_fu_281_p2(64 downto 64);
                trunc_ln223_reg_425 <= trunc_ln223_fu_287_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (icmp_ln196_1_reg_391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                k_V_12_reg_445 <= k_V_12_fu_324_p2;
                trunc_ln223_1_reg_450 <= trunc_ln223_1_fu_330_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                select_ln194_reg_435 <= select_ln194_fu_299_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (icmp_ln196_1_reg_391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                select_ln66_2_reg_440 <= select_ln66_2_fu_306_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                select_ln66_reg_410 <= select_ln66_fu_263_p3;
                w_digits_data_V_load_reg_415 <= w_digits_data_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (icmp_ln196_1_reg_391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                w_digits_data_V_load_1_reg_420 <= w_digits_data_V_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln196_1_reg_391, icmp_ln196_reg_372, tmp_reg_363, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((tmp_reg_363 = ap_const_lv1_1) or ((icmp_ln196_reg_372 = ap_const_lv1_0) or (icmp_ln196_1_reg_391 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln194_fu_341_p2 <= std_logic_vector(unsigned(i_reg_358) + unsigned(ap_const_lv6_2));
    add_ln197_1_fu_236_p2 <= std_logic_vector(unsigned(zext_ln149_1_fu_222_p1) + unsigned(add_ln141));
    add_ln197_fu_184_p2 <= std_logic_vector(unsigned(i_9_cast_fu_174_p1) + unsigned(add_ln141));
    add_ln229_fu_276_p2 <= std_logic_vector(unsigned(k_V_21_cast_reg_367) + unsigned(zext_ln64_fu_270_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_367_assign_proc : process(icmp_ln196_1_reg_391, ap_CS_fsm_state8, icmp_ln66_1_reg_395)
    begin
                ap_condition_367 <= ((icmp_ln66_1_reg_395 = ap_const_lv1_1) and (icmp_ln196_1_reg_391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8));
    end process;


    ap_condition_exit_pp0_iter0_stage5_assign_proc : process(ap_CS_fsm_state6, icmp_ln196_1_reg_391, icmp_ln196_reg_372, tmp_reg_363)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((tmp_reg_363 = ap_const_lv1_1) or ((icmp_ln196_reg_372 = ap_const_lv1_0) or (icmp_ln196_1_reg_391 = ap_const_lv1_0))))) then 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state6, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage5;

    ap_phi_mux_k_V_phi_fu_134_p4_assign_proc : process(ap_CS_fsm_state1, k_V_reg_131, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_phi_mux_k_V_phi_fu_134_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_k_V_phi_fu_134_p4 <= k_V_reg_131;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_7_fu_64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i <= i_7_fu_64;
        end if; 
    end process;

    empty_43_fu_162_p1 <= ap_sig_allocacmp_i(5 - 1 downto 0);
    i_9_cast28_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
    i_9_cast_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),7));
    icmp_ln196_1_fu_230_p2 <= "1" when (unsigned(zext_ln149_2_fu_226_p1) < unsigned(zext_ln110)) else "0";
    icmp_ln196_fu_178_p2 <= "1" when (unsigned(ap_sig_allocacmp_i) < unsigned(n)) else "0";
    icmp_ln66_1_fu_257_p2 <= "0" when (tmp_9_fu_247_p4 = ap_const_lv2_1) else "1";
    icmp_ln66_fu_205_p2 <= "0" when (tmp_7_fu_195_p4 = ap_const_lv2_1) else "1";
    k_V_10_fu_281_p2 <= std_logic_vector(unsigned(add_ln229_fu_276_p2) - unsigned(zext_ln229_fu_273_p1));
    k_V_12_fu_324_p2 <= std_logic_vector(unsigned(zext_ln67_fu_313_p1) + unsigned(newFirst_fu_319_p2));
    k_V_21_cast_fu_166_p3 <= 
        ap_const_lv65_1FFFFFFFFFFFFFFFF when (ap_phi_mux_k_V_phi_fu_134_p4(0) = '1') else 
        ap_const_lv65_0;
    newFirst_fu_319_p2 <= std_logic_vector(unsigned(select_ln194_reg_435) - unsigned(zext_ln229_1_fu_316_p1));
    or_ln194_fu_211_p2 <= (empty_43_fu_162_p1 or ap_const_lv5_1);

    r_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln196_1_reg_391, icmp_ln196_reg_372, tmp_reg_363, ap_CS_fsm_state8, tmp_fu_149_p3, icmp_ln196_fu_178_p2, icmp_ln66_reg_376, r_addr_reg_381, icmp_ln66_1_reg_395, r_addr_3_reg_400, zext_ln0_fu_190_p1, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((((icmp_ln66_1_reg_395 = ap_const_lv1_1) and (tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (icmp_ln196_1_reg_391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln66_1_reg_395 = ap_const_lv1_1) and (tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (icmp_ln196_1_reg_391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            r_address0 <= r_addr_3_reg_400;
        elsif (((icmp_ln66_reg_376 = ap_const_lv1_1) and (tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            r_address0 <= r_addr_reg_381;
        elsif (((icmp_ln196_fu_178_p2 = ap_const_lv1_1) and (tmp_fu_149_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_address0 <= zext_ln0_fu_190_p1(5 - 1 downto 0);
        else 
            r_address0 <= "XXXXX";
        end if; 
    end process;


    r_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln196_1_reg_391, icmp_ln196_reg_372, tmp_reg_363, ap_CS_fsm_state8, tmp_fu_149_p3, icmp_ln196_fu_178_p2, icmp_ln66_reg_376, icmp_ln66_1_reg_395, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_start_int)
    begin
        if ((((icmp_ln196_fu_178_p2 = ap_const_lv1_1) and (tmp_fu_149_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln66_1_reg_395 = ap_const_lv1_1) and (tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (icmp_ln196_1_reg_391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln66_1_reg_395 = ap_const_lv1_1) and (tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (icmp_ln196_1_reg_391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln66_reg_376 = ap_const_lv1_1) and (tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            r_ce0 <= ap_const_logic_1;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_d0_assign_proc : process(icmp_ln196_reg_372, tmp_reg_363, icmp_ln66_reg_376, trunc_ln223_reg_425, trunc_ln223_1_reg_450, ap_CS_fsm_state4, ap_condition_367)
    begin
        if (((tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1))) then
            if ((ap_const_boolean_1 = ap_condition_367)) then 
                r_d0 <= trunc_ln223_1_reg_450;
            elsif (((icmp_ln66_reg_376 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_d0 <= trunc_ln223_reg_425;
            else 
                r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_we0_assign_proc : process(icmp_ln196_1_reg_391, icmp_ln196_reg_372, tmp_reg_363, ap_CS_fsm_state8, icmp_ln66_reg_376, icmp_ln66_1_reg_395, ap_CS_fsm_state4)
    begin
        if ((((icmp_ln66_1_reg_395 = ap_const_lv1_1) and (tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (icmp_ln196_1_reg_391 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln66_reg_376 = ap_const_lv1_1) and (tmp_reg_363 = ap_const_lv1_0) and (icmp_ln196_reg_372 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            r_we0 <= ap_const_logic_1;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln194_fu_299_p3 <= 
        ap_const_lv65_1FFFFFFFFFFFFFFFF when (k_V_11_reg_430(0) = '1') else 
        ap_const_lv65_0;
    select_ln66_2_fu_306_p3 <= 
        r_q0 when (icmp_ln66_1_reg_395(0) = '1') else 
        ap_const_lv64_0;
    select_ln66_fu_263_p3 <= 
        r_q0 when (icmp_ln66_reg_376(0) = '1') else 
        ap_const_lv64_0;
    tmp_7_fu_195_p4 <= add_ln197_fu_184_p2(6 downto 5);
    tmp_9_fu_247_p4 <= add_ln197_1_fu_236_p2(6 downto 5);
    tmp_fu_149_p3 <= ap_sig_allocacmp_i(5 downto 5);
    trunc_ln223_1_fu_330_p1 <= k_V_12_fu_324_p2(64 - 1 downto 0);
    trunc_ln223_fu_287_p1 <= k_V_10_fu_281_p2(64 - 1 downto 0);
    w_digits_data_V_address0 <= zext_ln149_fu_217_p1(5 - 1 downto 0);
    w_digits_data_V_address1 <= i_9_cast28_fu_157_p1(5 - 1 downto 0);

    w_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            w_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_digits_data_V_ce1_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_digits_data_V_ce1 <= ap_const_logic_1;
        else 
            w_digits_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln0_31_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln197_1_fu_236_p2),64));
    zext_ln0_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln197_fu_184_p2),64));
    zext_ln149_1_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln194_fu_211_p2),7));
    zext_ln149_2_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln194_fu_211_p2),6));
    zext_ln149_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln194_fu_211_p2),64));
    zext_ln229_1_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_digits_data_V_load_1_reg_420),65));
    zext_ln229_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_digits_data_V_load_reg_415),65));
    zext_ln64_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln66_reg_410),65));
    zext_ln67_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln66_2_reg_440),65));
end behav;
