// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_divide_Pipeline_SHIFT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v_address0,
        v_ce0,
        v_we0,
        v_d0,
        v_q0,
        v_address1,
        v_ce1,
        v_we1,
        v_d1,
        v_q1,
        sh_prom_i_i460_cast_cast,
        sh_prom2_i_i464_cast_cast,
        cmp_i22_i457,
        zext_ln220_2,
        retval_0_i_i431274,
        k_V_out,
        k_V_out_ap_vld,
        trunc_ln6_out,
        trunc_ln6_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_state8 = 7'd8;
parameter    ap_ST_fsm_state9 = 7'd16;
parameter    ap_ST_fsm_state10 = 7'd32;
parameter    ap_ST_fsm_state11 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] v_address0;
output   v_ce0;
output   v_we0;
output  [63:0] v_d0;
input  [63:0] v_q0;
output  [4:0] v_address1;
output   v_ce1;
output   v_we1;
output  [63:0] v_d1;
input  [63:0] v_q1;
input  [7:0] sh_prom_i_i460_cast_cast;
input  [7:0] sh_prom2_i_i464_cast_cast;
input  [0:0] cmp_i22_i457;
input  [5:0] zext_ln220_2;
input  [5:0] retval_0_i_i431274;
output  [63:0] k_V_out;
output   k_V_out_ap_vld;
output  [63:0] trunc_ln6_out;
output   trunc_ln6_out_ap_vld;
output  [1:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] v_address0;
reg v_ce0;
reg v_we0;
reg[4:0] v_address1;
reg v_ce1;
reg v_we1;
reg[63:0] k_V_out;
reg k_V_out_ap_vld;
reg trunc_ln6_out_ap_vld;
reg[1:0] ap_return;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [127:0] sh_prom2_i_i464_cast_cast_cast_cast_fu_172_p1;
reg   [127:0] sh_prom2_i_i464_cast_cast_cast_cast_reg_363;
wire   [127:0] sh_prom_i_i460_cast_cast_cast_cast_fu_180_p1;
reg   [127:0] sh_prom_i_i460_cast_cast_cast_cast_reg_369;
wire   [0:0] tmp_fu_197_p3;
reg   [0:0] tmp_reg_375;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_375_pp0_iter1_reg;
wire   [0:0] icmp_ln222_fu_214_p2;
reg   [0:0] icmp_ln222_reg_379;
reg   [0:0] icmp_ln222_reg_379_pp0_iter1_reg;
reg   [4:0] v_addr_reg_383;
reg   [4:0] v_addr_reg_383_pp0_iter1_reg;
wire   [0:0] icmp_ln222_1_fu_234_p2;
reg   [0:0] icmp_ln222_1_reg_388;
reg   [0:0] icmp_ln222_1_reg_388_pp0_iter1_reg;
reg   [4:0] v_addr_65_reg_392;
reg   [4:0] v_addr_65_reg_392_pp0_iter1_reg;
reg   [4:0] v_addr_65_reg_392_pp0_iter2_reg;
reg   [63:0] v_load_reg_397;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [63:0] v_load_65_reg_402;
wire   [63:0] trunc_ln903_fu_270_p1;
reg   [63:0] trunc_ln903_reg_407;
reg   [63:0] trunc_ln6_reg_412;
reg    ap_enable_reg_pp0_iter1;
reg   [63:0] k_V_load_reg_418;
wire   [63:0] trunc_ln903_2_fu_310_p1;
reg   [63:0] trunc_ln903_2_reg_423;
wire   [63:0] or_ln223_1_fu_329_p2;
reg   [63:0] or_ln223_1_reg_428;
wire    ap_block_pp0_stage1_subdone;
reg    ap_predicate_tran5to8_state3;
reg    ap_predicate_tran5to9_state3;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state5;
reg    ap_enable_reg_pp0_iter2;
reg   [1:0] UnifiedRetVal_reg_147;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [63:0] j_6_cast15_fu_205_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln218_fu_225_p1;
reg   [63:0] k_V_fu_70;
wire    ap_block_pp0_stage1;
reg   [5:0] j_4_fu_74;
wire   [5:0] add_ln220_fu_239_p2;
wire  signed [31:0] sh_prom2_i_i464_cast_cast_cast_fu_168_p1;
wire  signed [31:0] sh_prom_i_i460_cast_cast_cast_fu_176_p1;
wire   [4:0] empty_42_fu_210_p1;
wire   [4:0] or_ln220_fu_219_p2;
wire   [5:0] zext_ln222_fu_230_p1;
wire   [127:0] zext_ln223_fu_250_p1;
wire   [127:0] shl_ln1691_fu_253_p2;
wire   [127:0] lshr_ln1691_fu_258_p2;
wire   [127:0] r_fu_263_p3;
wire   [127:0] zext_ln223_1_fu_290_p1;
wire   [127:0] shl_ln1691_1_fu_293_p2;
wire   [127:0] lshr_ln1691_1_fu_298_p2;
wire   [127:0] r_3_fu_303_p3;
reg   [1:0] ap_return_preg;
wire    ap_CS_fsm_state11;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_block_pp0_stage0_subdone;
reg   [2:0] ap_exit_tran_regpp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_return_preg = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state5) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state5) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 2'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_return_preg <= UnifiedRetVal_reg_147;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        UnifiedRetVal_reg_147 <= 2'd2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        UnifiedRetVal_reg_147 <= 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        UnifiedRetVal_reg_147 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if ((tmp_reg_375 == 1'd1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
            ap_exit_tran_regpp0[1] <= 1'b1;
        end else if ((ap_predicate_tran5to9_state3 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
            ap_exit_tran_regpp0[1] <= 1'b0;
        end else if ((ap_predicate_tran5to8_state3 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
            ap_exit_tran_regpp0[1] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_4_fu_74 <= 6'd0;
    end else if (((icmp_ln222_1_fu_234_p2 == 1'd1) & (icmp_ln222_fu_214_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_197_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_4_fu_74 <= add_ln220_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_V_fu_70 <= 64'd0;
    end else if (((icmp_ln222_1_reg_388_pp0_iter1_reg == 1'd1) & (icmp_ln222_reg_379_pp0_iter1_reg == 1'd1) & (tmp_reg_375_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        k_V_fu_70 <= {{r_3_fu_303_p3[127:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln222_fu_214_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_197_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln222_1_reg_388 <= icmp_ln222_1_fu_234_p2;
        v_addr_reg_383 <= j_6_cast15_fu_205_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln222_1_reg_388_pp0_iter1_reg <= icmp_ln222_1_reg_388;
        icmp_ln222_reg_379_pp0_iter1_reg <= icmp_ln222_reg_379;
        or_ln223_1_reg_428 <= or_ln223_1_fu_329_p2;
        tmp_reg_375 <= j_4_fu_74[32'd5];
        tmp_reg_375_pp0_iter1_reg <= tmp_reg_375;
        v_addr_65_reg_392_pp0_iter1_reg[4 : 1] <= v_addr_65_reg_392[4 : 1];
        v_addr_65_reg_392_pp0_iter2_reg[4 : 1] <= v_addr_65_reg_392_pp0_iter1_reg[4 : 1];
        v_addr_reg_383_pp0_iter1_reg <= v_addr_reg_383;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_197_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln222_reg_379 <= icmp_ln222_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln222_reg_379_pp0_iter1_reg == 1'd1) & (tmp_reg_375_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        k_V_load_reg_418 <= k_V_fu_70;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sh_prom2_i_i464_cast_cast_cast_cast_reg_363[31 : 0] <= sh_prom2_i_i464_cast_cast_cast_cast_fu_172_p1[31 : 0];
        sh_prom_i_i460_cast_cast_cast_cast_reg_369[31 : 0] <= sh_prom_i_i460_cast_cast_cast_cast_fu_180_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln222_reg_379 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_375 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        trunc_ln6_reg_412 <= {{r_fu_263_p3[127:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln222_1_reg_388_pp0_iter1_reg == 1'd1) & (icmp_ln222_reg_379_pp0_iter1_reg == 1'd1) & (tmp_reg_375_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        trunc_ln903_2_reg_423 <= trunc_ln903_2_fu_310_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln222_reg_379 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_375 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln903_reg_407 <= trunc_ln903_fu_270_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln222_1_fu_234_p2 == 1'd1) & (icmp_ln222_fu_214_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_197_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_addr_65_reg_392[4 : 1] <= zext_ln218_fu_225_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln222_1_reg_388 == 1'd1) & (icmp_ln222_reg_379 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_375 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        v_load_65_reg_402 <= v_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln222_reg_379 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_reg_375 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        v_load_reg_397 <= v_q1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & ((tmp_reg_375 == 1'd1) | (ap_predicate_tran5to9_state3 == 1'b1) | (ap_predicate_tran5to8_state3 == 1'b1)))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_return = UnifiedRetVal_reg_147;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        k_V_out = k_V_fu_70;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        k_V_out = k_V_load_reg_418;
    end else begin
        k_V_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10))) begin
        k_V_out_ap_vld = 1'b1;
    end else begin
        k_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        trunc_ln6_out_ap_vld = 1'b1;
    end else begin
        trunc_ln6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        v_address0 = v_addr_65_reg_392_pp0_iter2_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        v_address0 = zext_ln218_fu_225_p1;
    end else begin
        v_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        v_address1 = v_addr_reg_383_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        v_address1 = j_6_cast15_fu_205_p1;
    end else begin
        v_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        v_ce0 = 1'b1;
    end else begin
        v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        v_ce1 = 1'b1;
    end else begin
        v_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        v_we0 = 1'b1;
    end else begin
        v_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln222_reg_379_pp0_iter1_reg == 1'd1) & (tmp_reg_375_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        v_we1 = 1'b1;
    end else begin
        v_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_exit_tran_regpp0 == 3'd2) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_exit_tran_regpp0 == 3'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_exit_tran_regpp0 == 3'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_239_p2 = (j_4_fu_74 + 6'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran5to8_state3 = ((icmp_ln222_1_reg_388 == 1'd0) & (icmp_ln222_reg_379 == 1'd1) & (tmp_reg_375 == 1'd0));
end

always @ (*) begin
    ap_predicate_tran5to9_state3 = ((icmp_ln222_reg_379 == 1'd0) & (tmp_reg_375 == 1'd0));
end

assign empty_42_fu_210_p1 = j_4_fu_74[4:0];

assign icmp_ln222_1_fu_234_p2 = ((zext_ln222_fu_230_p1 < zext_ln220_2) ? 1'b1 : 1'b0);

assign icmp_ln222_fu_214_p2 = ((j_4_fu_74 < retval_0_i_i431274) ? 1'b1 : 1'b0);

assign j_6_cast15_fu_205_p1 = j_4_fu_74;

assign lshr_ln1691_1_fu_298_p2 = zext_ln223_1_fu_290_p1 >> sh_prom2_i_i464_cast_cast_cast_cast_reg_363;

assign lshr_ln1691_fu_258_p2 = zext_ln223_fu_250_p1 >> sh_prom2_i_i464_cast_cast_cast_cast_reg_363;

assign or_ln220_fu_219_p2 = (empty_42_fu_210_p1 | 5'd1);

assign or_ln223_1_fu_329_p2 = (trunc_ln903_2_reg_423 | trunc_ln6_reg_412);

assign r_3_fu_303_p3 = ((cmp_i22_i457[0:0] == 1'b1) ? shl_ln1691_1_fu_293_p2 : lshr_ln1691_1_fu_298_p2);

assign r_fu_263_p3 = ((cmp_i22_i457[0:0] == 1'b1) ? shl_ln1691_fu_253_p2 : lshr_ln1691_fu_258_p2);

assign sh_prom2_i_i464_cast_cast_cast_cast_fu_172_p1 = $unsigned(sh_prom2_i_i464_cast_cast_cast_fu_168_p1);

assign sh_prom2_i_i464_cast_cast_cast_fu_168_p1 = $signed(sh_prom2_i_i464_cast_cast);

assign sh_prom_i_i460_cast_cast_cast_cast_fu_180_p1 = $unsigned(sh_prom_i_i460_cast_cast_cast_fu_176_p1);

assign sh_prom_i_i460_cast_cast_cast_fu_176_p1 = $signed(sh_prom_i_i460_cast_cast);

assign shl_ln1691_1_fu_293_p2 = zext_ln223_1_fu_290_p1 << sh_prom_i_i460_cast_cast_cast_cast_reg_369;

assign shl_ln1691_fu_253_p2 = zext_ln223_fu_250_p1 << sh_prom_i_i460_cast_cast_cast_cast_reg_369;

assign tmp_fu_197_p3 = j_4_fu_74[32'd5];

assign trunc_ln6_out = trunc_ln6_reg_412;

assign trunc_ln903_2_fu_310_p1 = r_3_fu_303_p3[63:0];

assign trunc_ln903_fu_270_p1 = r_fu_263_p3[63:0];

assign v_d0 = or_ln223_1_reg_428;

assign v_d1 = (trunc_ln903_reg_407 | k_V_fu_70);

assign zext_ln218_fu_225_p1 = or_ln220_fu_219_p2;

assign zext_ln222_fu_230_p1 = or_ln220_fu_219_p2;

assign zext_ln223_1_fu_290_p1 = v_load_65_reg_402;

assign zext_ln223_fu_250_p1 = v_load_reg_397;

always @ (posedge ap_clk) begin
    sh_prom2_i_i464_cast_cast_cast_cast_reg_363[127:32] <= 96'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    sh_prom_i_i460_cast_cast_cast_cast_reg_369[127:32] <= 96'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    v_addr_65_reg_392[0] <= 1'b1;
    v_addr_65_reg_392_pp0_iter1_reg[0] <= 1'b1;
    v_addr_65_reg_392_pp0_iter2_reg[0] <= 1'b1;
    ap_exit_tran_regpp0[2] <= 1'b0;
end

endmodule //dut_divide_Pipeline_SHIFT
