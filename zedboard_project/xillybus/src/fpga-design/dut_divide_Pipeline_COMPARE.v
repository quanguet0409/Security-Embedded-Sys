// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_divide_Pipeline_COMPARE (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln110,
        w_digits_data_V_address0,
        w_digits_data_V_ce0,
        w_digits_data_V_q0,
        sext_ln143,
        r_address0,
        r_ce0,
        r_q0,
        i_4_out,
        i_4_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] zext_ln110;
output  [4:0] w_digits_data_V_address0;
output   w_digits_data_V_ce0;
input  [63:0] w_digits_data_V_q0;
input  [6:0] sext_ln143;
output  [4:0] r_address0;
output   r_ce0;
input  [63:0] r_q0;
output  [6:0] i_4_out;
output   i_4_out_ap_vld;
output  [2:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] w_digits_data_V_address0;
reg w_digits_data_V_ce0;
reg[4:0] r_address0;
reg r_ce0;
reg[6:0] i_4_out;
reg i_4_out_ap_vld;
reg[2:0] ap_return;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [7:0] sext_ln143_cast_fu_207_p1;
reg  signed [7:0] sext_ln143_cast_reg_392;
reg   [5:0] y_2_reg_398;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_228_p3;
reg   [0:0] tmp_reg_403;
wire   [5:0] empty_45_fu_236_p1;
reg   [5:0] empty_45_reg_407;
wire   [0:0] icmp_ln167_fu_249_p2;
reg   [0:0] icmp_ln167_reg_412;
wire   [0:0] icmp_ln66_fu_275_p2;
reg   [0:0] icmp_ln66_reg_416;
wire   [0:0] icmp_ln66_2_fu_294_p2;
reg   [0:0] icmp_ln66_2_reg_425;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln1068_fu_300_p2;
reg   [0:0] icmp_ln1068_reg_444;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln167_1_fu_320_p2;
reg   [0:0] icmp_ln167_1_reg_448;
wire   [7:0] add_ln167_1_fu_326_p2;
reg   [7:0] add_ln167_1_reg_452;
wire   [0:0] icmp_ln66_3_fu_341_p2;
reg   [0:0] icmp_ln66_3_reg_457;
wire    ap_CS_fsm_state5;
reg   [63:0] w_digits_data_V_load_1_reg_471;
wire    ap_CS_fsm_state6;
reg   [63:0] tmp_0_reg_147;
reg   [63:0] ap_phi_mux_ref_tmp44_0_phi_fu_161_p4;
reg   [63:0] ref_tmp44_0_reg_158;
reg   [63:0] tmp_0_1_reg_168;
reg   [2:0] ap_phi_mux_UnifiedRetVal_phi_fu_186_p10;
reg   [2:0] UnifiedRetVal_reg_179;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln0_fu_260_p1;
wire   [63:0] trunc_ln167_cast27_fu_240_p1;
wire   [63:0] zext_ln165_fu_311_p1;
wire   [63:0] zext_ln0_32_fu_347_p1;
reg   [5:0] y_fu_76;
wire   [5:0] y_3_fu_362_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln1068_92_fu_351_p2;
reg   [6:0] i_4_fu_80;
wire   [6:0] i_fu_356_p2;
wire   [6:0] zext_ln110_cast_fu_211_p1;
wire  signed [6:0] empty_45_fu_236_p0;
wire  signed [6:0] trunc_ln167_cast27_fu_240_p0;
wire  signed [6:0] trunc_ln167_cast_fu_245_p0;
wire  signed [6:0] icmp_ln167_fu_249_p0;
wire  signed [7:0] trunc_ln167_cast_fu_245_p1;
wire   [7:0] add_ln167_fu_255_p2;
wire   [2:0] tmp_12_fu_265_p4;
wire   [1:0] tmp_13_fu_284_p4;
wire  signed [5:0] add_ln170_fu_306_p2;
wire  signed [7:0] sext_ln165_fu_316_p1;
wire   [2:0] tmp_14_fu_331_p4;
reg   [2:0] ap_return_preg;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_condition_133;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_return_preg = 3'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 3'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_186_p10;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        UnifiedRetVal_reg_179 <= 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        UnifiedRetVal_reg_179 <= 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        UnifiedRetVal_reg_179 <= 3'd2;
    end else if (((icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln167_1_reg_448 == 1'd0) & (icmp_ln1068_reg_444 == 1'd1))) begin
        UnifiedRetVal_reg_179 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        UnifiedRetVal_reg_179 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_4_fu_80 <= zext_ln110_cast_fu_211_p1;
    end else if (((icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (icmp_ln1068_92_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln167_1_reg_448 == 1'd0) & (icmp_ln1068_reg_444 == 1'd1))) begin
        i_4_fu_80 <= i_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0))) begin
        if (((icmp_ln66_2_reg_425 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ref_tmp44_0_reg_158 <= 64'd0;
        end else if (((icmp_ln66_2_reg_425 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ref_tmp44_0_reg_158 <= w_digits_data_V_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_133)) begin
        if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln66_3_reg_457 == 1'd0))) begin
            tmp_0_1_reg_168 <= 64'd0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln66_3_reg_457 == 1'd1))) begin
            tmp_0_1_reg_168 <= r_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_275_p2 == 1'd0) & (icmp_ln167_fu_249_p2 == 1'd0) & (tmp_fu_228_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_0_reg_147 <= 64'd0;
    end else if (((icmp_ln66_reg_416 == 1'd1) & (icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_0_reg_147 <= r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_fu_76 <= 6'd0;
    end else if (((icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (icmp_ln1068_92_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln167_1_reg_448 == 1'd0) & (icmp_ln1068_reg_444 == 1'd1))) begin
        y_fu_76 <= y_3_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln167_1_fu_320_p2 == 1'd0) & (icmp_ln1068_fu_300_p2 == 1'd1))) begin
        add_ln167_1_reg_452 <= add_ln167_1_fu_326_p2;
        icmp_ln66_3_reg_457 <= icmp_ln66_3_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_228_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_45_reg_407 <= empty_45_fu_236_p1;
        icmp_ln167_reg_412 <= icmp_ln167_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln1068_reg_444 <= icmp_ln1068_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln1068_fu_300_p2 == 1'd1))) begin
        icmp_ln167_1_reg_448 <= icmp_ln167_1_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_249_p2 == 1'd0) & (tmp_fu_228_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln66_2_reg_425 <= icmp_ln66_2_fu_294_p2;
        icmp_ln66_reg_416 <= icmp_ln66_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sext_ln143_cast_reg_392 <= sext_ln143_cast_fu_207_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_reg_403 <= y_fu_76[32'd5];
        y_2_reg_398 <= y_fu_76;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln167_1_reg_448 == 1'd0) & (icmp_ln1068_reg_444 == 1'd1))) begin
        w_digits_data_V_load_1_reg_471 <= w_digits_data_V_q0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln167_1_reg_448 == 1'd0) & (icmp_ln1068_reg_444 == 1'd1))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_186_p10 = 3'd1;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_186_p10 = UnifiedRetVal_reg_179;
    end
end

always @ (*) begin
    if (((icmp_ln66_2_reg_425 == 1'd1) & (icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_phi_mux_ref_tmp44_0_phi_fu_161_p4 = 64'd0;
    end else begin
        ap_phi_mux_ref_tmp44_0_phi_fu_161_p4 = ref_tmp44_0_reg_158;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_186_p10;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_4_out = 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_4_out = 7'd1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12) | ((icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln167_1_reg_448 == 1'd0) & (icmp_ln1068_reg_444 == 1'd1)))) begin
        i_4_out = i_4_fu_80;
    end else begin
        i_4_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12) | ((icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln167_1_reg_448 == 1'd0) & (icmp_ln1068_reg_444 == 1'd1)))) begin
        i_4_out_ap_vld = 1'b1;
    end else begin
        i_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        r_address0 = zext_ln0_32_fu_347_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        r_address0 = zext_ln0_fu_260_p1;
    end else begin
        r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        r_ce0 = 1'b1;
    end else begin
        r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_digits_data_V_address0 = zext_ln165_fu_311_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        w_digits_data_V_address0 = trunc_ln167_cast27_fu_240_p1;
    end else begin
        w_digits_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4))) begin
        w_digits_data_V_ce0 = 1'b1;
    end else begin
        w_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (icmp_ln1068_92_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln167_1_reg_448 == 1'd0) & (icmp_ln1068_reg_444 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((tmp_reg_403 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((icmp_ln167_reg_412 == 1'd1) & (tmp_reg_403 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if (((icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln1068_reg_444 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln167_1_reg_448 == 1'd1) & (icmp_ln1068_reg_444 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln167_1_fu_326_p2 = ($signed(sext_ln165_fu_316_p1) + $signed(sext_ln143_cast_reg_392));

assign add_ln167_fu_255_p2 = ($signed(trunc_ln167_cast_fu_245_p1) + $signed(sext_ln143_cast_reg_392));

assign add_ln170_fu_306_p2 = ($signed(empty_45_reg_407) + $signed(6'd63));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_condition_133 = ((icmp_ln167_reg_412 == 1'd0) & (tmp_reg_403 == 1'd0) & (icmp_ln167_1_reg_448 == 1'd0) & (icmp_ln1068_reg_444 == 1'd1));
end

assign empty_45_fu_236_p0 = i_4_fu_80;

assign empty_45_fu_236_p1 = empty_45_fu_236_p0[5:0];

assign i_fu_356_p2 = ($signed(i_4_fu_80) + $signed(7'd126));

assign icmp_ln1068_92_fu_351_p2 = ((tmp_0_1_reg_168 == w_digits_data_V_load_1_reg_471) ? 1'b1 : 1'b0);

assign icmp_ln1068_fu_300_p2 = ((tmp_0_reg_147 == ap_phi_mux_ref_tmp44_0_phi_fu_161_p4) ? 1'b1 : 1'b0);

assign icmp_ln167_1_fu_320_p2 = ((i_4_fu_80 == 7'd1) ? 1'b1 : 1'b0);

assign icmp_ln167_fu_249_p0 = i_4_fu_80;

assign icmp_ln167_fu_249_p2 = ((icmp_ln167_fu_249_p0 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln66_2_fu_294_p2 = ((tmp_13_fu_284_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln66_3_fu_341_p2 = (($signed(tmp_14_fu_331_p4) < $signed(3'd1)) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_275_p2 = (($signed(tmp_12_fu_265_p4) < $signed(3'd1)) ? 1'b1 : 1'b0);

assign sext_ln143_cast_fu_207_p1 = $signed(sext_ln143);

assign sext_ln165_fu_316_p1 = add_ln170_fu_306_p2;

assign tmp_12_fu_265_p4 = {{add_ln167_fu_255_p2[7:5]}};

assign tmp_13_fu_284_p4 = {{i_4_fu_80[6:5]}};

assign tmp_14_fu_331_p4 = {{add_ln167_1_fu_326_p2[7:5]}};

assign tmp_fu_228_p3 = y_fu_76[32'd5];

assign trunc_ln167_cast27_fu_240_p0 = i_4_fu_80;

assign trunc_ln167_cast27_fu_240_p1 = $unsigned(trunc_ln167_cast27_fu_240_p0);

assign trunc_ln167_cast_fu_245_p0 = i_4_fu_80;

assign trunc_ln167_cast_fu_245_p1 = trunc_ln167_cast_fu_245_p0;

assign y_3_fu_362_p2 = (y_2_reg_398 + 6'd2);

assign zext_ln0_32_fu_347_p1 = add_ln167_1_reg_452;

assign zext_ln0_fu_260_p1 = add_ln167_fu_255_p2;

assign zext_ln110_cast_fu_211_p1 = zext_ln110;

assign zext_ln165_fu_311_p1 = $unsigned(add_ln170_fu_306_p2);

endmodule //dut_divide_Pipeline_COMPARE
