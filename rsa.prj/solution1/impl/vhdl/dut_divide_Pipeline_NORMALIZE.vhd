-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_divide_Pipeline_NORMALIZE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vn_V : IN STD_LOGIC_VECTOR (63 downto 0);
    d_out : OUT STD_LOGIC_VECTOR (6 downto 0);
    d_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of dut_divide_Pipeline_NORMALIZE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1064_1_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_117_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_phi_mux_UnifiedRetVal_phi_fu_88_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal vn_V_1_fu_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1043_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal magic_fu_64 : STD_LOGIC_VECTOR (6 downto 0);
    signal magic_3_fu_176_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal d_fu_68 : STD_LOGIC_VECTOR (6 downto 0);
    signal d_1_fu_170_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal d_load_2_load_fu_201_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal d_load_1_load_fu_205_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_11_fu_137_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal vn_V_2_fu_156_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_78 : BOOLEAN;
    signal ap_condition_71 : BOOLEAN;
    signal ap_condition_213 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv2_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((tmp_fu_117_p3 = ap_const_lv1_1) or ((icmp_ln1064_fu_128_p2 = ap_const_lv1_1) or (icmp_ln1064_1_fu_147_p2 = ap_const_lv1_1))))) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_88_p6;
                end if; 
            end if;
        end if;
    end process;


    d_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    d_fu_68 <= ap_const_lv7_40;
                elsif ((ap_const_boolean_1 = ap_condition_213)) then 
                    d_fu_68 <= d_1_fu_170_p2;
                end if;
            end if; 
        end if;
    end process;

    magic_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    magic_fu_64 <= ap_const_lv7_0;
                elsif ((ap_const_boolean_1 = ap_condition_213)) then 
                    magic_fu_64 <= magic_3_fu_176_p2;
                end if;
            end if; 
        end if;
    end process;

    vn_V_1_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    vn_V_1_fu_60 <= vn_V;
                elsif ((ap_const_boolean_1 = ap_condition_213)) then 
                    vn_V_1_fu_60 <= zext_ln1043_fu_166_p1;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_213_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln1064_1_fu_147_p2, icmp_ln1064_fu_128_p2, tmp_fu_117_p3)
    begin
                ap_condition_213 <= ((tmp_fu_117_p3 = ap_const_lv1_0) and (icmp_ln1064_fu_128_p2 = ap_const_lv1_0) and (icmp_ln1064_1_fu_147_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_71_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_71 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_78_assign_proc : process(icmp_ln1064_1_fu_147_p2, icmp_ln1064_fu_128_p2, tmp_fu_117_p3)
    begin
                ap_condition_78 <= ((tmp_fu_117_p3 = ap_const_lv1_0) and (icmp_ln1064_fu_128_p2 = ap_const_lv1_0) and (icmp_ln1064_1_fu_147_p2 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1064_1_fu_147_p2, icmp_ln1064_fu_128_p2, tmp_fu_117_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((tmp_fu_117_p3 = ap_const_lv1_1) or ((icmp_ln1064_fu_128_p2 = ap_const_lv1_1) or (icmp_ln1064_1_fu_147_p2 = ap_const_lv1_1))))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_UnifiedRetVal_phi_fu_88_p6_assign_proc : process(icmp_ln1064_fu_128_p2, tmp_fu_117_p3, ap_condition_78, ap_condition_71)
    begin
        if ((ap_const_boolean_1 = ap_condition_71)) then
            if (((tmp_fu_117_p3 = ap_const_lv1_0) and (icmp_ln1064_fu_128_p2 = ap_const_lv1_1))) then 
                ap_phi_mux_UnifiedRetVal_phi_fu_88_p6 <= ap_const_lv2_2;
            elsif ((ap_const_boolean_1 = ap_condition_78)) then 
                ap_phi_mux_UnifiedRetVal_phi_fu_88_p6 <= ap_const_lv2_1;
            elsif ((tmp_fu_117_p3 = ap_const_lv1_1)) then 
                ap_phi_mux_UnifiedRetVal_phi_fu_88_p6 <= ap_const_lv2_0;
            else 
                ap_phi_mux_UnifiedRetVal_phi_fu_88_p6 <= "XX";
            end if;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_88_p6 <= "XX";
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1064_1_fu_147_p2, icmp_ln1064_fu_128_p2, tmp_fu_117_p3, ap_phi_mux_UnifiedRetVal_phi_fu_88_p6, ap_block_pp0_stage0_11001, ap_return_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((tmp_fu_117_p3 = ap_const_lv1_1) or ((icmp_ln1064_fu_128_p2 = ap_const_lv1_1) or (icmp_ln1064_1_fu_147_p2 = ap_const_lv1_1))))) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_88_p6;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    d_1_fu_170_p2 <= std_logic_vector(unsigned(d_fu_68) + unsigned(ap_const_lv7_7E));
    d_load_1_load_fu_205_p1 <= d_fu_68;
    d_load_2_load_fu_201_p1 <= d_fu_68;

    d_out_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1064_fu_128_p2, tmp_fu_117_p3, d_fu_68, d_load_2_load_fu_201_p1, d_load_1_load_fu_205_p1, ap_block_pp0_stage0_01001, ap_condition_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((tmp_fu_117_p3 = ap_const_lv1_1)) then 
                d_out <= d_load_1_load_fu_205_p1;
            elsif (((tmp_fu_117_p3 = ap_const_lv1_0) and (icmp_ln1064_fu_128_p2 = ap_const_lv1_1))) then 
                d_out <= d_load_2_load_fu_201_p1;
            elsif ((ap_const_boolean_1 = ap_condition_78)) then 
                d_out <= d_fu_68;
            else 
                d_out <= "XXXXXXX";
            end if;
        else 
            d_out <= "XXXXXXX";
        end if; 
    end process;


    d_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1064_1_fu_147_p2, icmp_ln1064_fu_128_p2, tmp_fu_117_p3, ap_block_pp0_stage0_11001)
    begin
        if ((((tmp_fu_117_p3 = ap_const_lv1_0) and (icmp_ln1064_fu_128_p2 = ap_const_lv1_0) and (icmp_ln1064_1_fu_147_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_fu_117_p3 = ap_const_lv1_0) and (icmp_ln1064_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_fu_117_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            d_out_ap_vld <= ap_const_logic_1;
        else 
            d_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1064_1_fu_147_p2 <= "1" when (tmp_11_fu_137_p4 = ap_const_lv63_0) else "0";
    icmp_ln1064_fu_128_p2 <= "1" when (vn_V_1_fu_60 = ap_const_lv64_0) else "0";
    magic_3_fu_176_p2 <= std_logic_vector(unsigned(magic_fu_64) + unsigned(ap_const_lv7_2));
    tmp_11_fu_137_p4 <= vn_V_1_fu_60(63 downto 1);
    tmp_fu_117_p3 <= magic_fu_64(6 downto 6);
    vn_V_2_fu_156_p4 <= vn_V_1_fu_60(63 downto 2);
    zext_ln1043_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vn_V_2_fu_156_p4),64));
end behav;
