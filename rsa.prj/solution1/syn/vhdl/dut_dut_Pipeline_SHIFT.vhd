-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_dut_Pipeline_SHIFT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln238 : IN STD_LOGIC_VECTOR (5 downto 0);
    e_digits_data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    e_digits_data_V_ce0 : OUT STD_LOGIC;
    e_digits_data_V_we0 : OUT STD_LOGIC;
    e_digits_data_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    e_digits_data_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    e_digits_data_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    e_digits_data_V_ce1 : OUT STD_LOGIC;
    e_digits_data_V_we1 : OUT STD_LOGIC;
    e_digits_data_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    e_digits_data_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of dut_dut_Pipeline_SHIFT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal icmp_ln240_1_reg_290 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln240_reg_281 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tmp_fu_125_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln240_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_digits_data_V_addr_reg_285 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln240_1_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_digits_data_V_addr_1_reg_294 : STD_LOGIC_VECTOR (4 downto 0);
    signal e_digits_data_V_load_reg_299 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal tmp_5_reg_304 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_309 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3_reg_314 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1691_fu_152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_fu_169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_V_fu_60 : STD_LOGIC_VECTOR (64 downto 0);
    signal phitmp_cast_fu_225_p3 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal x_fu_64 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_3_fu_174_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_x_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_fu_68 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln238_cast_fu_103_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln241_1_fu_163_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_32_fu_136_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln241_fu_146_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_31_fu_221_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1543_fu_245_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_73 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    j_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((ap_const_boolean_1 = ap_condition_73)) then 
                    j_fu_68 <= add_ln241_1_fu_163_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_68 <= zext_ln238_cast_fu_103_p1;
                end if;
            end if; 
        end if;
    end process;

    k_V_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                k_V_fu_60(64) <= '0';
            elsif (((tmp_reg_277 = ap_const_lv1_0) and (icmp_ln240_reg_281 = ap_const_lv1_0) and (icmp_ln240_1_reg_290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                                k_V_fu_60(64) <= phitmp_cast_fu_225_p3(64);
            end if; 
        end if;
    end process;

    x_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((ap_const_boolean_1 = ap_condition_73)) then 
                    x_fu_64 <= x_3_fu_174_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_64 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln240_1_fu_157_p2 = ap_const_lv1_0) and (icmp_ln240_fu_140_p2 = ap_const_lv1_0) and (tmp_fu_125_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                e_digits_data_V_addr_1_reg_294 <= zext_ln67_fu_169_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln240_fu_140_p2 = ap_const_lv1_0) and (tmp_fu_125_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                e_digits_data_V_addr_reg_285 <= zext_ln1691_fu_152_p1(5 - 1 downto 0);
                icmp_ln240_1_reg_290 <= icmp_ln240_1_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_277 = ap_const_lv1_0) and (icmp_ln240_reg_281 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                e_digits_data_V_load_reg_299 <= e_digits_data_V_q1;
                tmp_2_reg_309 <= e_digits_data_V_q1(63 downto 1);
                tmp_5_reg_304 <= k_V_fu_60(64 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_125_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln240_reg_281 <= icmp_ln240_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_277 = ap_const_lv1_0) and (icmp_ln240_reg_281 = ap_const_lv1_0) and (icmp_ln240_1_reg_290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_3_reg_314 <= e_digits_data_V_q0(63 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_277 <= ap_sig_allocacmp_x_2(5 downto 5);
            end if;
        end if;
    end process;
    k_V_fu_60(63 downto 0) <= "0000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln241_1_fu_163_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_load) + unsigned(ap_const_lv7_7E));
    add_ln241_fu_146_p2 <= std_logic_vector(unsigned(empty_32_fu_136_p1) + unsigned(ap_const_lv5_1F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_73_assign_proc : process(tmp_fu_125_p3, icmp_ln240_fu_140_p2, icmp_ln240_1_fu_157_p2)
    begin
                ap_condition_73 <= ((icmp_ln240_1_fu_157_p2 = ap_const_lv1_0) and (icmp_ln240_fu_140_p2 = ap_const_lv1_0) and (tmp_fu_125_p3 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_CS_fsm_state3, icmp_ln240_1_reg_290, icmp_ln240_reg_281, tmp_reg_277)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_reg_277 = ap_const_lv1_1) or ((icmp_ln240_reg_281 = ap_const_lv1_1) or (icmp_ln240_1_reg_290 = ap_const_lv1_1))))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state3, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, j_fu_68, zext_ln238_cast_fu_103_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= zext_ln238_cast_fu_103_p1;
        else 
            ap_sig_allocacmp_j_load <= j_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_x_2_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, x_fu_64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_x_2 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_x_2 <= x_fu_64;
        end if; 
    end process;


    e_digits_data_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln240_1_reg_290, icmp_ln240_reg_281, tmp_reg_277, tmp_fu_125_p3, icmp_ln240_fu_140_p2, icmp_ln240_1_fu_157_p2, e_digits_data_V_addr_1_reg_294, zext_ln67_fu_169_p1)
    begin
        if (((tmp_reg_277 = ap_const_lv1_0) and (icmp_ln240_reg_281 = ap_const_lv1_0) and (icmp_ln240_1_reg_290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            e_digits_data_V_address0 <= e_digits_data_V_addr_1_reg_294;
        elsif (((icmp_ln240_1_fu_157_p2 = ap_const_lv1_0) and (icmp_ln240_fu_140_p2 = ap_const_lv1_0) and (tmp_fu_125_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_digits_data_V_address0 <= zext_ln67_fu_169_p1(5 - 1 downto 0);
        else 
            e_digits_data_V_address0 <= "XXXXX";
        end if; 
    end process;


    e_digits_data_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln240_reg_281, tmp_reg_277, tmp_fu_125_p3, icmp_ln240_fu_140_p2, e_digits_data_V_addr_reg_285, zext_ln1691_fu_152_p1)
    begin
        if (((tmp_reg_277 = ap_const_lv1_0) and (icmp_ln240_reg_281 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            e_digits_data_V_address1 <= e_digits_data_V_addr_reg_285;
        elsif (((icmp_ln240_fu_140_p2 = ap_const_lv1_0) and (tmp_fu_125_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_digits_data_V_address1 <= zext_ln1691_fu_152_p1(5 - 1 downto 0);
        else 
            e_digits_data_V_address1 <= "XXXXX";
        end if; 
    end process;


    e_digits_data_V_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln240_1_reg_290, icmp_ln240_reg_281, tmp_reg_277, tmp_fu_125_p3, icmp_ln240_fu_140_p2, icmp_ln240_1_fu_157_p2, ap_start_int)
    begin
        if ((((tmp_reg_277 = ap_const_lv1_0) and (icmp_ln240_reg_281 = ap_const_lv1_0) and (icmp_ln240_1_reg_290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln240_1_fu_157_p2 = ap_const_lv1_0) and (icmp_ln240_fu_140_p2 = ap_const_lv1_0) and (tmp_fu_125_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            e_digits_data_V_ce0 <= ap_const_logic_1;
        else 
            e_digits_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    e_digits_data_V_ce1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln240_reg_281, tmp_reg_277, tmp_fu_125_p3, icmp_ln240_fu_140_p2, ap_start_int)
    begin
        if ((((tmp_reg_277 = ap_const_lv1_0) and (icmp_ln240_reg_281 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln240_fu_140_p2 = ap_const_lv1_0) and (tmp_fu_125_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            e_digits_data_V_ce1 <= ap_const_logic_1;
        else 
            e_digits_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    e_digits_data_V_d0 <= (trunc_ln1543_fu_245_p1 & tmp_3_reg_314);
    e_digits_data_V_d1 <= (tmp_5_reg_304 & tmp_2_reg_309);

    e_digits_data_V_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln240_1_reg_290, icmp_ln240_reg_281, tmp_reg_277)
    begin
        if (((tmp_reg_277 = ap_const_lv1_0) and (icmp_ln240_reg_281 = ap_const_lv1_0) and (icmp_ln240_1_reg_290 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            e_digits_data_V_we0 <= ap_const_logic_1;
        else 
            e_digits_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    e_digits_data_V_we1_assign_proc : process(ap_CS_fsm_state3, icmp_ln240_reg_281, tmp_reg_277)
    begin
        if (((tmp_reg_277 = ap_const_lv1_0) and (icmp_ln240_reg_281 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            e_digits_data_V_we1 <= ap_const_logic_1;
        else 
            e_digits_data_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_31_fu_221_p1 <= e_digits_data_V_q0(1 - 1 downto 0);
    empty_32_fu_136_p1 <= ap_sig_allocacmp_j_load(5 - 1 downto 0);
    icmp_ln240_1_fu_157_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv7_1) else "0";
    icmp_ln240_fu_140_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv7_0) else "0";
    phitmp_cast_fu_225_p3 <= (empty_31_fu_221_p1 & ap_const_lv64_0);
    tmp_fu_125_p3 <= ap_sig_allocacmp_x_2(5 downto 5);
    trunc_ln1543_fu_245_p1 <= e_digits_data_V_load_reg_299(1 - 1 downto 0);
    x_3_fu_174_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_2) + unsigned(ap_const_lv6_2));
    zext_ln1691_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln241_fu_146_p2),64));
    zext_ln238_cast_fu_103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln238),7));
    zext_ln67_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln241_1_fu_163_p2),64));
end behav;
