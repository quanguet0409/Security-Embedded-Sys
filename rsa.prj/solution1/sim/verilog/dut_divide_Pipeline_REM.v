// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_divide_Pipeline_REM (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add_ln141,
        r_address0,
        r_ce0,
        r_we0,
        r_d0,
        r_q0,
        w_digits_data_V_address0,
        w_digits_data_V_ce0,
        w_digits_data_V_q0,
        w_digits_data_V_address1,
        w_digits_data_V_ce1,
        w_digits_data_V_q1,
        zext_ln110,
        n
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] add_ln141;
output  [4:0] r_address0;
output   r_ce0;
output   r_we0;
output  [63:0] r_d0;
input  [63:0] r_q0;
output  [4:0] w_digits_data_V_address0;
output   w_digits_data_V_ce0;
input  [63:0] w_digits_data_V_q0;
output  [4:0] w_digits_data_V_address1;
output   w_digits_data_V_ce1;
input  [63:0] w_digits_data_V_q1;
input  [5:0] zext_ln110;
input  [5:0] n;

reg ap_idle;
reg[4:0] r_address0;
reg r_ce0;
reg r_we0;
reg[63:0] r_d0;
reg w_digits_data_V_ce0;
reg w_digits_data_V_ce1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
reg   [0:0] icmp_ln196_1_reg_391;
reg   [0:0] icmp_ln196_reg_372;
reg   [0:0] tmp_reg_363;
reg    ap_condition_exit_pp0_iter0_stage5;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
reg   [0:0] k_V_reg_131;
reg   [5:0] i_reg_358;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] tmp_fu_149_p3;
wire   [64:0] k_V_21_cast_fu_166_p3;
reg   [64:0] k_V_21_cast_reg_367;
wire   [0:0] icmp_ln196_fu_178_p2;
wire   [0:0] icmp_ln66_fu_205_p2;
reg   [0:0] icmp_ln66_reg_376;
reg   [4:0] r_addr_reg_381;
wire   [0:0] icmp_ln196_1_fu_230_p2;
wire   [0:0] icmp_ln66_1_fu_257_p2;
reg   [0:0] icmp_ln66_1_reg_395;
reg   [4:0] r_addr_3_reg_400;
wire   [63:0] select_ln66_fu_263_p3;
reg   [63:0] select_ln66_reg_410;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [63:0] w_digits_data_V_load_reg_415;
reg   [63:0] w_digits_data_V_load_1_reg_420;
wire   [63:0] trunc_ln223_fu_287_p1;
reg   [63:0] trunc_ln223_reg_425;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [0:0] k_V_11_reg_430;
wire   [64:0] select_ln194_fu_299_p3;
reg   [64:0] select_ln194_reg_435;
wire   [63:0] select_ln66_2_fu_306_p3;
reg   [63:0] select_ln66_2_reg_440;
wire   [64:0] k_V_12_fu_324_p2;
reg   [64:0] k_V_12_reg_445;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
wire   [63:0] trunc_ln223_1_fu_330_p1;
reg   [63:0] trunc_ln223_1_reg_450;
reg   [0:0] ap_phi_mux_k_V_phi_fu_134_p4;
wire    ap_loop_init;
wire   [63:0] zext_ln0_fu_190_p1;
wire   [63:0] i_9_cast28_fu_157_p1;
wire   [63:0] zext_ln0_31_fu_242_p1;
wire   [63:0] zext_ln149_fu_217_p1;
reg   [5:0] i_7_fu_64;
wire   [5:0] add_ln194_fu_341_p2;
reg   [5:0] ap_sig_allocacmp_i;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
wire   [6:0] i_9_cast_fu_174_p1;
wire   [6:0] add_ln197_fu_184_p2;
wire   [1:0] tmp_7_fu_195_p4;
wire   [4:0] empty_43_fu_162_p1;
wire   [4:0] or_ln194_fu_211_p2;
wire   [5:0] zext_ln149_2_fu_226_p1;
wire   [6:0] zext_ln149_1_fu_222_p1;
wire   [6:0] add_ln197_1_fu_236_p2;
wire   [1:0] tmp_9_fu_247_p4;
wire   [64:0] zext_ln64_fu_270_p1;
wire   [64:0] add_ln229_fu_276_p2;
wire   [64:0] zext_ln229_fu_273_p1;
wire   [64:0] k_V_10_fu_281_p2;
wire   [64:0] zext_ln229_1_fu_316_p1;
wire   [64:0] zext_ln67_fu_313_p1;
wire   [64:0] newFirst_fu_319_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_start_int;
reg    ap_condition_367;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_done_reg = 1'b0;
end

dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage5),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        i_7_fu_64 <= 6'd0;
    end else if (((tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (icmp_ln196_1_reg_391 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_7_fu_64 <= add_ln194_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        k_V_reg_131 <= 1'd0;
    end else if (((tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (icmp_ln196_1_reg_391 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        k_V_reg_131 <= k_V_12_reg_445[32'd64];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_358 <= ap_sig_allocacmp_i;
        tmp_reg_363 <= ap_sig_allocacmp_i[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_fu_178_p2 == 1'd1) & (tmp_fu_149_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln196_1_reg_391 <= icmp_ln196_1_fu_230_p2;
        icmp_ln66_reg_376 <= icmp_ln66_fu_205_p2;
        r_addr_reg_381 <= zext_ln0_fu_190_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_149_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln196_reg_372 <= icmp_ln196_fu_178_p2;
        k_V_21_cast_reg_367 <= k_V_21_cast_fu_166_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_1_fu_230_p2 == 1'd1) & (icmp_ln196_fu_178_p2 == 1'd1) & (tmp_fu_149_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln66_1_reg_395 <= icmp_ln66_1_fu_257_p2;
        r_addr_3_reg_400 <= zext_ln0_31_fu_242_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_V_11_reg_430 <= k_V_10_fu_281_p2[32'd64];
        trunc_ln223_reg_425 <= trunc_ln223_fu_287_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (icmp_ln196_1_reg_391 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        k_V_12_reg_445 <= k_V_12_fu_324_p2;
        trunc_ln223_1_reg_450 <= trunc_ln223_1_fu_330_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        select_ln194_reg_435 <= select_ln194_fu_299_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (icmp_ln196_1_reg_391 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        select_ln66_2_reg_440 <= select_ln66_2_fu_306_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        select_ln66_reg_410 <= select_ln66_fu_263_p3;
        w_digits_data_V_load_reg_415 <= w_digits_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (icmp_ln196_1_reg_391 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        w_digits_data_V_load_1_reg_420 <= w_digits_data_V_q0;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & ((tmp_reg_363 == 1'd1) | ((icmp_ln196_reg_372 == 1'd0) | (icmp_ln196_1_reg_391 == 1'd0))))) begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_phi_mux_k_V_phi_fu_134_p4 = 1'd0;
    end else begin
        ap_phi_mux_k_V_phi_fu_134_p4 = k_V_reg_131;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 6'd0;
    end else begin
        ap_sig_allocacmp_i = i_7_fu_64;
    end
end

always @ (*) begin
    if ((((icmp_ln66_1_reg_395 == 1'd1) & (tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (icmp_ln196_1_reg_391 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln66_1_reg_395 == 1'd1) & (tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (icmp_ln196_1_reg_391 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        r_address0 = r_addr_3_reg_400;
    end else if (((icmp_ln66_reg_376 == 1'd1) & (tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_address0 = r_addr_reg_381;
    end else if (((icmp_ln196_fu_178_p2 == 1'd1) & (tmp_fu_149_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        r_address0 = zext_ln0_fu_190_p1;
    end else begin
        r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln196_fu_178_p2 == 1'd1) & (tmp_fu_149_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln66_1_reg_395 == 1'd1) & (tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (icmp_ln196_1_reg_391 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln66_1_reg_395 == 1'd1) & (tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (icmp_ln196_1_reg_391 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln66_reg_376 == 1'd1) & (tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        r_ce0 = 1'b1;
    end else begin
        r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1))) begin
        if ((1'b1 == ap_condition_367)) begin
            r_d0 = trunc_ln223_1_reg_450;
        end else if (((icmp_ln66_reg_376 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            r_d0 = trunc_ln223_reg_425;
        end else begin
            r_d0 = 'bx;
        end
    end else begin
        r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln66_1_reg_395 == 1'd1) & (tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (icmp_ln196_1_reg_391 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln66_reg_376 == 1'd1) & (tmp_reg_363 == 1'd0) & (icmp_ln196_reg_372 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        r_we0 = 1'b1;
    end else begin
        r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w_digits_data_V_ce0 = 1'b1;
    end else begin
        w_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w_digits_data_V_ce1 = 1'b1;
    end else begin
        w_digits_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & ((tmp_reg_363 == 1'd1) | ((icmp_ln196_reg_372 == 1'd0) | (icmp_ln196_1_reg_391 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln194_fu_341_p2 = (i_reg_358 + 6'd2);

assign add_ln197_1_fu_236_p2 = (zext_ln149_1_fu_222_p1 + add_ln141);

assign add_ln197_fu_184_p2 = (i_9_cast_fu_174_p1 + add_ln141);

assign add_ln229_fu_276_p2 = (k_V_21_cast_reg_367 + zext_ln64_fu_270_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_367 = ((icmp_ln66_1_reg_395 == 1'd1) & (icmp_ln196_1_reg_391 == 1'd1) & (1'b1 == ap_CS_fsm_state8));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage5;

assign empty_43_fu_162_p1 = ap_sig_allocacmp_i[4:0];

assign i_9_cast28_fu_157_p1 = ap_sig_allocacmp_i;

assign i_9_cast_fu_174_p1 = ap_sig_allocacmp_i;

assign icmp_ln196_1_fu_230_p2 = ((zext_ln149_2_fu_226_p1 < zext_ln110) ? 1'b1 : 1'b0);

assign icmp_ln196_fu_178_p2 = ((ap_sig_allocacmp_i < n) ? 1'b1 : 1'b0);

assign icmp_ln66_1_fu_257_p2 = ((tmp_9_fu_247_p4 != 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_205_p2 = ((tmp_7_fu_195_p4 != 2'd1) ? 1'b1 : 1'b0);

assign k_V_10_fu_281_p2 = (add_ln229_fu_276_p2 - zext_ln229_fu_273_p1);

assign k_V_12_fu_324_p2 = (zext_ln67_fu_313_p1 + newFirst_fu_319_p2);

assign k_V_21_cast_fu_166_p3 = ((ap_phi_mux_k_V_phi_fu_134_p4[0:0] == 1'b1) ? 65'd36893488147419103231 : 65'd0);

assign newFirst_fu_319_p2 = (select_ln194_reg_435 - zext_ln229_1_fu_316_p1);

assign or_ln194_fu_211_p2 = (empty_43_fu_162_p1 | 5'd1);

assign select_ln194_fu_299_p3 = ((k_V_11_reg_430[0:0] == 1'b1) ? 65'd36893488147419103231 : 65'd0);

assign select_ln66_2_fu_306_p3 = ((icmp_ln66_1_reg_395[0:0] == 1'b1) ? r_q0 : 64'd0);

assign select_ln66_fu_263_p3 = ((icmp_ln66_reg_376[0:0] == 1'b1) ? r_q0 : 64'd0);

assign tmp_7_fu_195_p4 = {{add_ln197_fu_184_p2[6:5]}};

assign tmp_9_fu_247_p4 = {{add_ln197_1_fu_236_p2[6:5]}};

assign tmp_fu_149_p3 = ap_sig_allocacmp_i[32'd5];

assign trunc_ln223_1_fu_330_p1 = k_V_12_fu_324_p2[63:0];

assign trunc_ln223_fu_287_p1 = k_V_10_fu_281_p2[63:0];

assign w_digits_data_V_address0 = zext_ln149_fu_217_p1;

assign w_digits_data_V_address1 = i_9_cast28_fu_157_p1;

assign zext_ln0_31_fu_242_p1 = add_ln197_1_fu_236_p2;

assign zext_ln0_fu_190_p1 = add_ln197_fu_184_p2;

assign zext_ln149_1_fu_222_p1 = or_ln194_fu_211_p2;

assign zext_ln149_2_fu_226_p1 = or_ln194_fu_211_p2;

assign zext_ln149_fu_217_p1 = or_ln194_fu_211_p2;

assign zext_ln229_1_fu_316_p1 = w_digits_data_V_load_1_reg_420;

assign zext_ln229_fu_273_p1 = w_digits_data_V_load_reg_415;

assign zext_ln64_fu_270_p1 = select_ln66_reg_410;

assign zext_ln67_fu_313_p1 = select_ln66_2_reg_440;

endmodule //dut_divide_Pipeline_REM
