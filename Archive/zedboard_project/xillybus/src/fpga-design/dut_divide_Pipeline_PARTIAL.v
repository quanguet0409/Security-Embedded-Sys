// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_divide_Pipeline_PARTIAL (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v_address0,
        v_ce0,
        v_q0,
        v_address1,
        v_ce1,
        v_q1,
        zext_ln146,
        w_digits_data_V_address0,
        w_digits_data_V_ce0,
        w_digits_data_V_we0,
        w_digits_data_V_d0,
        zext_ln110,
        n,
        k_V_13_out,
        k_V_13_out_ap_vld,
        k_V_out,
        k_V_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_state10 = 6'd8;
parameter    ap_ST_fsm_state11 = 6'd16;
parameter    ap_ST_fsm_state12 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] v_address0;
output   v_ce0;
input  [63:0] v_q0;
output  [4:0] v_address1;
output   v_ce1;
input  [63:0] v_q1;
input  [63:0] zext_ln146;
output  [4:0] w_digits_data_V_address0;
output   w_digits_data_V_ce0;
output   w_digits_data_V_we0;
output  [63:0] w_digits_data_V_d0;
input  [5:0] zext_ln110;
input  [5:0] n;
output  [63:0] k_V_13_out;
output   k_V_13_out_ap_vld;
output  [63:0] k_V_out;
output   k_V_out_ap_vld;
output  [1:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v_ce0;
reg v_ce1;
reg[4:0] w_digits_data_V_address0;
reg w_digits_data_V_ce0;
reg w_digits_data_V_we0;
reg[63:0] w_digits_data_V_d0;
reg[63:0] k_V_13_out;
reg k_V_13_out_ap_vld;
reg k_V_out_ap_vld;
reg[1:0] ap_return;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [127:0] zext_ln146_cast_fu_172_p1;
reg   [127:0] zext_ln146_cast_reg_331;
wire   [0:0] tmp_fu_189_p3;
reg   [0:0] tmp_reg_337;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_337_pp0_iter1_reg;
reg   [0:0] tmp_reg_337_pp0_iter2_reg;
reg   [0:0] tmp_reg_337_pp0_iter3_reg;
wire   [63:0] i_cast24_fu_197_p1;
reg   [63:0] i_cast24_reg_341;
reg   [63:0] i_cast24_reg_341_pp0_iter1_reg;
reg   [63:0] i_cast24_reg_341_pp0_iter2_reg;
wire   [0:0] icmp_ln153_fu_206_p2;
reg   [0:0] icmp_ln153_reg_346;
reg   [0:0] icmp_ln153_reg_346_pp0_iter1_reg;
reg   [0:0] icmp_ln153_reg_346_pp0_iter2_reg;
reg   [0:0] icmp_ln153_reg_346_pp0_iter3_reg;
wire   [63:0] zext_ln153_fu_217_p1;
reg   [63:0] zext_ln153_reg_355;
reg   [63:0] zext_ln153_reg_355_pp0_iter1_reg;
reg   [63:0] zext_ln153_reg_355_pp0_iter2_reg;
reg   [63:0] zext_ln153_reg_355_pp0_iter3_reg;
wire   [0:0] icmp_ln153_1_fu_226_p2;
reg   [0:0] icmp_ln153_1_reg_360;
reg   [0:0] icmp_ln153_1_reg_360_pp0_iter1_reg;
reg   [0:0] icmp_ln153_1_reg_360_pp0_iter2_reg;
reg   [0:0] icmp_ln153_1_reg_360_pp0_iter3_reg;
reg   [63:0] v_load_reg_369;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_state9_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
reg   [63:0] v_load_66_reg_374;
wire   [127:0] grp_fu_245_p2;
reg   [127:0] mul_ln885_reg_389;
reg   [63:0] grp_load_fu_168_p1;
reg   [63:0] k_V_13_load_1_reg_394;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] trunc_ln223_fu_267_p1;
reg   [63:0] trunc_ln223_reg_399;
reg   [63:0] k_V_14_reg_404;
wire   [127:0] grp_fu_253_p2;
reg   [127:0] mul_ln885_2_reg_410;
wire   [63:0] trunc_ln223_2_fu_289_p1;
reg   [63:0] trunc_ln223_2_reg_415;
reg   [63:0] trunc_ln149_1_reg_420;
wire    ap_block_pp0_stage1_subdone;
reg    ap_predicate_tran8to10_state3;
reg    ap_predicate_tran8to11_state3;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter3;
reg   [1:0] ap_phi_mux_UnifiedRetVal_phi_fu_157_p6;
reg   [1:0] UnifiedRetVal_reg_152;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
reg   [63:0] k_V_13_fu_66;
reg   [63:0] ap_sig_allocacmp_k_V_13_load_1;
reg   [5:0] i_fu_70;
wire   [5:0] add_ln151_fu_231_p2;
wire   [4:0] empty_44_fu_202_p1;
wire   [4:0] or_ln151_fu_211_p2;
wire   [5:0] zext_ln153_1_fu_222_p1;
wire   [63:0] grp_fu_245_p0;
wire   [63:0] grp_fu_245_p1;
wire   [63:0] grp_fu_253_p0;
wire   [63:0] grp_fu_253_p1;
wire   [127:0] k_V_15_cast_fu_258_p1;
wire   [127:0] k_V_fu_262_p2;
wire   [127:0] zext_ln1043_fu_281_p1;
wire   [127:0] k_V_15_fu_284_p2;
reg   [1:0] ap_return_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg   [2:0] ap_exit_tran_regpp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [127:0] grp_fu_245_p10;
wire   [127:0] grp_fu_253_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_return_preg = 2'd0;
end

dut_mul_64ns_64ns_128_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_3_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_245_p0),
    .din1(grp_fu_245_p1),
    .ce(1'b1),
    .dout(grp_fu_245_p2)
);

dut_mul_64ns_64ns_128_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_3_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_253_p0),
    .din1(grp_fu_253_p1),
    .ce(1'b1),
    .dout(grp_fu_253_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 2'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_157_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        UnifiedRetVal_reg_152 <= 2'd2;
    end else if (((icmp_ln153_reg_346 == 1'd1) & (tmp_reg_337 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        UnifiedRetVal_reg_152 <= 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        UnifiedRetVal_reg_152 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if ((tmp_reg_337 == 1'd1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
            ap_exit_tran_regpp0[1] <= 1'b1;
        end else if ((ap_predicate_tran8to11_state3 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
            ap_exit_tran_regpp0[1] <= 1'b0;
        end else if ((ap_predicate_tran8to10_state3 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
            ap_exit_tran_regpp0[1] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_70 <= 6'd0;
    end else if (((icmp_ln153_fu_206_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_fu_189_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln153_1_fu_226_p2 == 1'd1))) begin
        i_fu_70 <= add_ln151_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_V_13_fu_66 <= 64'd0;
    end else if (((icmp_ln153_reg_346_pp0_iter3_reg == 1'd1) & (tmp_reg_337_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln153_1_reg_360_pp0_iter3_reg == 1'd1))) begin
        k_V_13_fu_66 <= trunc_ln149_1_reg_420;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_189_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast24_reg_341[5 : 0] <= i_cast24_fu_197_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast24_reg_341_pp0_iter1_reg[5 : 0] <= i_cast24_reg_341[5 : 0];
        i_cast24_reg_341_pp0_iter2_reg[5 : 0] <= i_cast24_reg_341_pp0_iter1_reg[5 : 0];
        icmp_ln153_1_reg_360_pp0_iter1_reg <= icmp_ln153_1_reg_360;
        icmp_ln153_1_reg_360_pp0_iter2_reg <= icmp_ln153_1_reg_360_pp0_iter1_reg;
        icmp_ln153_1_reg_360_pp0_iter3_reg <= icmp_ln153_1_reg_360_pp0_iter2_reg;
        icmp_ln153_reg_346_pp0_iter1_reg <= icmp_ln153_reg_346;
        icmp_ln153_reg_346_pp0_iter2_reg <= icmp_ln153_reg_346_pp0_iter1_reg;
        icmp_ln153_reg_346_pp0_iter3_reg <= icmp_ln153_reg_346_pp0_iter2_reg;
        tmp_reg_337_pp0_iter1_reg <= tmp_reg_337;
        tmp_reg_337_pp0_iter2_reg <= tmp_reg_337_pp0_iter1_reg;
        tmp_reg_337_pp0_iter3_reg <= tmp_reg_337_pp0_iter2_reg;
        zext_ln153_reg_355_pp0_iter1_reg[4 : 1] <= zext_ln153_reg_355[4 : 1];
        zext_ln153_reg_355_pp0_iter2_reg[4 : 1] <= zext_ln153_reg_355_pp0_iter1_reg[4 : 1];
        zext_ln153_reg_355_pp0_iter3_reg[4 : 1] <= zext_ln153_reg_355_pp0_iter2_reg[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln153_fu_206_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_189_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln153_1_reg_360 <= icmp_ln153_1_fu_226_p2;
        zext_ln153_reg_355[4 : 1] <= zext_ln153_fu_217_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_fu_189_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln153_reg_346 <= icmp_ln153_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_337_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        k_V_13_load_1_reg_394 <= grp_load_fu_168_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln153_reg_346_pp0_iter2_reg == 1'd1) & (tmp_reg_337_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        k_V_14_reg_404 <= {{k_V_fu_262_p2[127:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln153_reg_346_pp0_iter2_reg == 1'd1) & (tmp_reg_337_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln153_1_reg_360_pp0_iter2_reg == 1'd1))) begin
        mul_ln885_2_reg_410 <= grp_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln153_reg_346_pp0_iter1_reg == 1'd1) & (tmp_reg_337_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln885_reg_389 <= grp_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_337 <= i_fu_70[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln153_reg_346_pp0_iter2_reg == 1'd1) & (tmp_reg_337_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln153_1_reg_360_pp0_iter2_reg == 1'd1))) begin
        trunc_ln149_1_reg_420 <= {{k_V_15_fu_284_p2[127:64]}};
        trunc_ln223_2_reg_415 <= trunc_ln223_2_fu_289_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln153_reg_346_pp0_iter2_reg == 1'd1) & (tmp_reg_337_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        trunc_ln223_reg_399 <= trunc_ln223_fu_267_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln153_reg_346 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_reg_337 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln153_1_reg_360 == 1'd1))) begin
        v_load_66_reg_374 <= v_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln153_reg_346 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_reg_337 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        v_load_reg_369 <= v_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        zext_ln146_cast_reg_331[63 : 0] <= zext_ln146_cast_fu_172_p1[63 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & ((tmp_reg_337 == 1'd1) | (ap_predicate_tran8to11_state3 == 1'b1) | (ap_predicate_tran8to10_state3 == 1'b1)))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln153_reg_346 == 1'd1) & (tmp_reg_337 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_157_p6 = 2'd1;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_157_p6 = UnifiedRetVal_reg_152;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_157_p6;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((icmp_ln153_reg_346_pp0_iter3_reg == 1'd1) & (tmp_reg_337_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln153_1_reg_360_pp0_iter3_reg == 1'd1))) begin
        ap_sig_allocacmp_k_V_13_load_1 = trunc_ln149_1_reg_420;
    end else begin
        ap_sig_allocacmp_k_V_13_load_1 = k_V_13_fu_66;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((icmp_ln153_reg_346 == 1'd1) & (tmp_reg_337 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        grp_load_fu_168_p1 = k_V_13_fu_66;
    end else if (((tmp_reg_337_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_load_fu_168_p1 = ap_sig_allocacmp_k_V_13_load_1;
    end else begin
        grp_load_fu_168_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        k_V_13_out = k_V_13_load_1_reg_394;
    end else if (((1'b1 == ap_CS_fsm_state12) | ((icmp_ln153_reg_346 == 1'd1) & (tmp_reg_337 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        k_V_13_out = grp_load_fu_168_p1;
    end else begin
        k_V_13_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | ((icmp_ln153_reg_346 == 1'd1) & (tmp_reg_337 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        k_V_13_out_ap_vld = 1'b1;
    end else begin
        k_V_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln153_reg_346 == 1'd1) & (tmp_reg_337 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        k_V_out_ap_vld = 1'b1;
    end else begin
        k_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_ce0 = 1'b1;
    end else begin
        v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_ce1 = 1'b1;
    end else begin
        v_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            w_digits_data_V_address0 = zext_ln153_reg_355_pp0_iter3_reg;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            w_digits_data_V_address0 = i_cast24_reg_341_pp0_iter2_reg;
        end else begin
            w_digits_data_V_address0 = 'bx;
        end
    end else begin
        w_digits_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        w_digits_data_V_ce0 = 1'b1;
    end else begin
        w_digits_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            w_digits_data_V_d0 = trunc_ln223_2_reg_415;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            w_digits_data_V_d0 = trunc_ln223_reg_399;
        end else begin
            w_digits_data_V_d0 = 'bx;
        end
    end else begin
        w_digits_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln153_reg_346_pp0_iter3_reg == 1'd1) & (tmp_reg_337_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln153_1_reg_360_pp0_iter3_reg == 1'd1)) | ((icmp_ln153_reg_346_pp0_iter2_reg == 1'd1) & (tmp_reg_337_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        w_digits_data_V_we0 = 1'b1;
    end else begin
        w_digits_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_exit_tran_regpp0 == 3'd2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_exit_tran_regpp0 == 3'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_exit_tran_regpp0 == 3'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln151_fu_231_p2 = (i_fu_70 + 6'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran8to10_state3 = ((icmp_ln153_reg_346 == 1'd1) & (tmp_reg_337 == 1'd0) & (icmp_ln153_1_reg_360 == 1'd0));
end

always @ (*) begin
    ap_predicate_tran8to11_state3 = ((icmp_ln153_reg_346 == 1'd0) & (tmp_reg_337 == 1'd0));
end

assign empty_44_fu_202_p1 = i_fu_70[4:0];

assign grp_fu_245_p0 = zext_ln146_cast_reg_331;

assign grp_fu_245_p1 = grp_fu_245_p10;

assign grp_fu_245_p10 = v_load_reg_369;

assign grp_fu_253_p0 = zext_ln146_cast_reg_331;

assign grp_fu_253_p1 = grp_fu_253_p10;

assign grp_fu_253_p10 = v_load_66_reg_374;

assign i_cast24_fu_197_p1 = i_fu_70;

assign icmp_ln153_1_fu_226_p2 = ((zext_ln153_1_fu_222_p1 < zext_ln110) ? 1'b1 : 1'b0);

assign icmp_ln153_fu_206_p2 = ((i_fu_70 < n) ? 1'b1 : 1'b0);

assign k_V_15_cast_fu_258_p1 = grp_load_fu_168_p1;

assign k_V_15_fu_284_p2 = (mul_ln885_2_reg_410 + zext_ln1043_fu_281_p1);

assign k_V_fu_262_p2 = (mul_ln885_reg_389 + k_V_15_cast_fu_258_p1);

assign k_V_out = k_V_14_reg_404;

assign or_ln151_fu_211_p2 = (empty_44_fu_202_p1 | 5'd1);

assign tmp_fu_189_p3 = i_fu_70[32'd5];

assign trunc_ln223_2_fu_289_p1 = k_V_15_fu_284_p2[63:0];

assign trunc_ln223_fu_267_p1 = k_V_fu_262_p2[63:0];

assign v_address0 = zext_ln153_fu_217_p1;

assign v_address1 = i_cast24_fu_197_p1;

assign zext_ln1043_fu_281_p1 = k_V_14_reg_404;

assign zext_ln146_cast_fu_172_p1 = zext_ln146;

assign zext_ln153_1_fu_222_p1 = or_ln151_fu_211_p2;

assign zext_ln153_fu_217_p1 = or_ln151_fu_211_p2;

always @ (posedge ap_clk) begin
    zext_ln146_cast_reg_331[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    i_cast24_reg_341[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    i_cast24_reg_341_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    i_cast24_reg_341_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln153_reg_355[0] <= 1'b1;
    zext_ln153_reg_355[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln153_reg_355_pp0_iter1_reg[0] <= 1'b1;
    zext_ln153_reg_355_pp0_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln153_reg_355_pp0_iter2_reg[0] <= 1'b1;
    zext_ln153_reg_355_pp0_iter2_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln153_reg_355_pp0_iter3_reg[0] <= 1'b1;
    zext_ln153_reg_355_pp0_iter3_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    ap_exit_tran_regpp0[2] <= 1'b0;
end

endmodule //dut_divide_Pipeline_PARTIAL
