-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_operator_1_Pipeline_OUTER_INNER is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    v_ce0 : OUT STD_LOGIC;
    v_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    v_ce1 : OUT STD_LOGIC;
    v_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    agg_result_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    agg_result_ce0 : OUT STD_LOGIC;
    agg_result_we0 : OUT STD_LOGIC;
    agg_result_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_377_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_377_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_377_p_dout0 : IN STD_LOGIC_VECTOR (127 downto 0);
    grp_fu_377_p_ce : OUT STD_LOGIC;
    grp_fu_381_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_381_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_381_p_dout0 : IN STD_LOGIC_VECTOR (127 downto 0);
    grp_fu_381_p_ce : OUT STD_LOGIC );
end;


architecture behav of dut_operator_1_Pipeline_OUTER_INNER is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal icmp_ln88_reg_416 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln88_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_159_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln88_fu_167_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln88_reg_425 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln88_2_fu_181_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln88_2_reg_431 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln91_fu_198_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln91_reg_443 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal v_load_63_reg_458 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_463 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_addr_reg_468 : STD_LOGIC_VECTOR (4 downto 0);
    signal v_load_64_reg_473 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_478_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_addr_2_reg_483 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_addr_2_reg_483_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal v_load_reg_488 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal zext_ln88_1_fu_271_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln88_1_reg_493 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal zext_ln1539_fu_274_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln1539_1_fu_283_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal mul_ln885_reg_509 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal select_ln66_fu_305_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln66_reg_514 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal add_ln885_fu_312_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln885_reg_520 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln885_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln885_reg_525 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln885_1_reg_530 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln223_fu_329_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln223_reg_535 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal k_V_2_reg_540 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln66_1_fu_346_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln66_1_reg_545 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln885_2_fu_353_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln885_2_reg_551 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln885_2_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln885_2_reg_556 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln223_1_fu_370_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln223_1_reg_561 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_reg_566 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal i_assign_cast2_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln89_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln0_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln0_30_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_V_fu_50 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal i_fu_54 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln91_fu_261_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (5 downto 0);
    signal j_fu_58 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_fu_62 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln88_1_fu_147_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal add_ln88_fu_175_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_30_fu_194_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln93_fu_223_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln89_1_fu_240_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln93_1_fu_243_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal select_ln88_1_fu_294_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_V_cast_fu_301_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln885_fu_321_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal k_V_6_fu_324_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln1043_fu_343_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln885_1_fu_362_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal k_V_7_fu_365_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_mul_64ns_64ns_128_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_54 <= ap_const_lv6_0;
            elsif (((icmp_ln88_reg_416 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_54 <= add_ln91_fu_261_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln88_fu_141_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_62 <= add_ln88_1_fu_147_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_62 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln88_fu_141_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_58 <= select_ln88_2_fu_181_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_58 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    k_V_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_V_fu_50 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                k_V_fu_50 <= trunc_ln1_reg_566;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln223_1_reg_561 <= add_ln223_1_fu_370_p2;
                trunc_ln1_reg_566 <= k_V_7_fu_365_p2(127 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_reg_416 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                add_ln223_reg_535 <= add_ln223_fu_329_p2;
                k_V_2_reg_540 <= k_V_6_fu_324_p2(127 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln885_2_reg_551 <= add_ln885_2_fu_353_p2;
                select_ln66_1_reg_545 <= select_ln66_1_fu_346_p3;
                trunc_ln885_2_reg_556 <= trunc_ln885_2_fu_358_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_reg_416 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                add_ln885_reg_520 <= add_ln885_fu_312_p2;
                mul_ln885_1_reg_530 <= grp_fu_381_p_dout0;
                select_ln66_reg_514 <= select_ln66_fu_305_p3;
                trunc_ln885_reg_525 <= trunc_ln885_fu_317_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_reg_416 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                agg_result_addr_2_reg_483 <= zext_ln0_30_fu_248_p1(5 - 1 downto 0);
                agg_result_addr_reg_468 <= zext_ln0_fu_227_p1(5 - 1 downto 0);
                tmp_3_reg_463 <= add_ln93_fu_223_p2(5 downto 5);
                tmp_4_reg_478 <= add_ln93_1_fu_243_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                agg_result_addr_2_reg_483_pp0_iter1_reg <= agg_result_addr_2_reg_483;
                tmp_4_reg_478_pp0_iter1_reg <= tmp_4_reg_478;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln88_reg_416 <= icmp_ln88_fu_141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_reg_416 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                mul_ln885_reg_509 <= grp_fu_377_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_fu_141_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    or_ln91_reg_443(4 downto 1) <= or_ln91_fu_198_p2(4 downto 1);
                select_ln88_2_reg_431 <= select_ln88_2_fu_181_p3;
                select_ln88_reg_425 <= select_ln88_fu_167_p3;
                tmp_reg_420 <= ap_sig_allocacmp_i_load(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_reg_416 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                v_load_63_reg_458 <= v_q1;
                v_load_64_reg_473 <= v_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_reg_416 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                v_load_reg_488 <= v_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_reg_416 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    zext_ln88_1_reg_493(63 downto 0) <= zext_ln88_1_fu_271_p1(63 downto 0);
            end if;
        end if;
    end process;
    or_ln91_reg_443(0) <= '1';
    zext_ln88_1_reg_493(127 downto 64) <= "0000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_condition_exit_pp0_iter0_stage4, ap_block_pp0_stage7_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln223_1_fu_370_p2 <= std_logic_vector(unsigned(trunc_ln885_2_reg_556) + unsigned(select_ln66_1_reg_545));
    add_ln223_fu_329_p2 <= std_logic_vector(unsigned(trunc_ln885_reg_525) + unsigned(select_ln66_reg_514));
    add_ln885_2_fu_353_p2 <= std_logic_vector(unsigned(mul_ln885_1_reg_530) + unsigned(zext_ln1043_fu_343_p1));
    add_ln885_fu_312_p2 <= std_logic_vector(unsigned(mul_ln885_reg_509) + unsigned(k_V_cast_fu_301_p1));
    add_ln88_1_fu_147_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln88_fu_175_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_load) + unsigned(ap_const_lv6_1));
    add_ln91_fu_261_p2 <= std_logic_vector(unsigned(select_ln88_reg_425) + unsigned(ap_const_lv6_2));
    add_ln93_1_fu_243_p2 <= std_logic_vector(unsigned(zext_ln89_1_fu_240_p1) + unsigned(select_ln88_2_reg_431));
    add_ln93_fu_223_p2 <= std_logic_vector(unsigned(select_ln88_reg_425) + unsigned(select_ln88_2_reg_431));

    agg_result_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, agg_result_addr_reg_468, agg_result_addr_2_reg_483, agg_result_addr_2_reg_483_pp0_iter1_reg, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage5, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            agg_result_address0 <= agg_result_addr_2_reg_483_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            agg_result_address0 <= agg_result_addr_2_reg_483;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            agg_result_address0 <= agg_result_addr_reg_468;
        else 
            agg_result_address0 <= "XXXXX";
        end if; 
    end process;


    agg_result_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            agg_result_ce0 <= ap_const_logic_1;
        else 
            agg_result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, add_ln223_reg_535, add_ln223_1_reg_561, ap_block_pp0_stage0, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                agg_result_d0 <= add_ln223_1_reg_561;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                agg_result_d0 <= add_ln223_reg_535;
            else 
                agg_result_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            agg_result_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    agg_result_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, tmp_3_reg_463, tmp_4_reg_478_pp0_iter1_reg, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_3_reg_463 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (tmp_4_reg_478_pp0_iter1_reg = ap_const_lv1_0)))) then 
            agg_result_we0 <= ap_const_logic_1;
        else 
            agg_result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, icmp_ln88_reg_416)
    begin
        if (((icmp_ln88_reg_416 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_54)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_54;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_62)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_62;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_58)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_58;
        end if; 
    end process;

    empty_30_fu_194_p1 <= select_ln88_fu_167_p3(5 - 1 downto 0);
    grp_fu_377_p_ce <= ap_const_logic_1;
    grp_fu_377_p_din0 <= zext_ln1539_fu_274_p1(64 - 1 downto 0);
    grp_fu_377_p_din1 <= zext_ln88_1_fu_271_p1(64 - 1 downto 0);
    grp_fu_381_p_ce <= ap_const_logic_1;
    grp_fu_381_p_din0 <= zext_ln1539_1_fu_283_p1(64 - 1 downto 0);
    grp_fu_381_p_din1 <= zext_ln88_1_reg_493(64 - 1 downto 0);
    i_assign_cast2_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln88_fu_167_p3),64));
    icmp_ln88_fu_141_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_200) else "0";
    k_V_6_fu_324_p2 <= std_logic_vector(unsigned(add_ln885_reg_520) + unsigned(zext_ln885_fu_321_p1));
    k_V_7_fu_365_p2 <= std_logic_vector(unsigned(add_ln885_2_reg_551) + unsigned(zext_ln885_1_fu_362_p1));
    k_V_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln88_1_fu_294_p3),128));
    or_ln91_fu_198_p2 <= (empty_30_fu_194_p1 or ap_const_lv5_1);
    select_ln66_1_fu_346_p3 <= 
        ap_const_lv64_0 when (tmp_4_reg_478_pp0_iter1_reg(0) = '1') else 
        agg_result_q0;
    select_ln66_fu_305_p3 <= 
        ap_const_lv64_0 when (tmp_3_reg_463(0) = '1') else 
        agg_result_q0;
    select_ln88_1_fu_294_p3 <= 
        ap_const_lv64_0 when (tmp_reg_420(0) = '1') else 
        k_V_fu_50;
    select_ln88_2_fu_181_p3 <= 
        add_ln88_fu_175_p2 when (tmp_fu_159_p3(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln88_fu_167_p3 <= 
        ap_const_lv6_0 when (tmp_fu_159_p3(0) = '1') else 
        ap_sig_allocacmp_i_load;
    tmp_fu_159_p3 <= ap_sig_allocacmp_i_load(5 downto 5);
    trunc_ln885_2_fu_358_p1 <= add_ln885_2_fu_353_p2(64 - 1 downto 0);
    trunc_ln885_fu_317_p1 <= add_ln885_fu_312_p2(64 - 1 downto 0);

    v_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln89_fu_204_p1, zext_ln88_fu_219_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                v_address0 <= zext_ln88_fu_219_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                v_address0 <= zext_ln89_fu_204_p1(5 - 1 downto 0);
            else 
                v_address0 <= "XXXXX";
            end if;
        else 
            v_address0 <= "XXXXX";
        end if; 
    end process;

    v_address1 <= i_assign_cast2_fu_189_p1(5 - 1 downto 0);

    v_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            v_ce0 <= ap_const_logic_1;
        else 
            v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v_ce1 <= ap_const_logic_1;
        else 
            v_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln0_30_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln93_1_fu_243_p2),64));
    zext_ln0_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln93_fu_223_p2),64));
    zext_ln1043_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_V_2_reg_540),128));
    zext_ln1539_1_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_load_64_reg_473),128));
    zext_ln1539_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_load_63_reg_458),128));
    zext_ln885_1_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln66_1_reg_545),128));
    zext_ln885_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln66_reg_514),128));
    zext_ln88_1_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_load_reg_488),128));
    zext_ln88_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln88_2_reg_431),64));
    zext_ln89_1_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln91_reg_443),6));
    zext_ln89_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln91_fu_198_p2),64));
end behav;
